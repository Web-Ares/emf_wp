!function(){$(function(){$(".popup").each(function(){new Popup($(this))})})}();var Popup=function(n){var o=this,p=$(".popup__open"),i=n,t=i.find(".popup__close, .popup__cancel"),e=i.find(".popup__wrap"),s=i.find(".popup__content"),c=$("html, body"),d=$(".site__content"),u=$(window),a=!0,f=setTimeout(function(){},1),l=function(){d.css({"z-index":4})},_=function(){d.css({"z-index":2})},r=function(){i.css({overflowY:"hidden"}),i.removeClass("popup_opened"),i.addClass("popup_hide"),f=setTimeout(function(){i.css({overflowY:"auto"}),i.removeClass("popup_hide")},300),u.width()<1024&&(c.css({overflowY:"auto",paddingRight:0}),_()),s.css({display:"none"}),i.find(".popup__addresses").length&&(i.find(".popup__addresses").children().css({display:"none"}),i.find(".popup__addresses").children().html(""),p.removeClass("ajax-block__btn_loaded"))},h=function(){i[0].obj=o,w()},w=function(){u.on({load:function(){a=u.width()>=1024},resize:function(){u.width()>=1024?a=!1:(a||r(),a=!0)}}),p.on({click:function(){return v($(this).attr("data-popup")),!1}}),e.on({click:function(n){n.stopPropagation()}}),i.on({click:function(){return r(),!1}}),t.on({click:function(){return r(),!1}})},v=function(n){m(n),i.addClass("popup_opened"),u.width()<1024&&(c.css({overflowY:"hidden"}),l())},m=function(n){var o=s.filter(".popup__"+n);o.css({display:"block"})};h()};
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),p=$('<span class="websters-select__item"></span>'),d=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(d),d=o.parent(),d.append('<div class="websters-select__arrow"></div>'),o.before(p),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),p.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),d.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){p.text($(this).find("option:selected").text())}),1!=s||l||(d.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}})),$(".nice-scroll").on({scroll:function(){u&&v()}})},g=function(){!s||l?y():1==s&&_()},_=function(){d.addClass("websters-select_custom")},y=function(){d.addClass("websters-select_mobile")},m=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),d.offset()),l=0,p=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==p?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),f.append(t),d.addClass("websters-select_opened"),t.css({width:d.outerWidth(),left:s.left,top:s.top+d.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
//# sourceMappingURL=data:application/json;base64,
