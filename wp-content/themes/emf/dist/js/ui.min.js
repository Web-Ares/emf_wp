!function(){$(function(){$(".popup").each(function(){new Popup($(this))})})}();var Popup=function(n){var o=this,p=$(".popup__open"),i=n,e=i.find(".popup__close, .popup__cancel"),s=i.find(".popup__wrap"),t=i.find(".popup__content"),c=$("html, body"),u=$(".site__content"),d=$(window),a=setTimeout(function(){},1),f=function(){u.css({"z-index":4})},l=function(){u.css({"z-index":2})},_=function(){i.css({overflowY:"hidden"}),i.removeClass("popup_opened"),i.addClass("popup_hide"),a=setTimeout(function(){i.css({overflowY:"auto"}),i.removeClass("popup_hide")},300),d.width()<1024&&(c.css({overflowY:"auto",paddingRight:0}),l()),t.css({display:"none"}),i.find(".popup__addresses").length&&(i.find(".popup__addresses").children().css({display:"none"}),i.find(".popup__addresses").children().html(""),p.removeClass("ajax-block__btn_loaded"))},r=function(){i[0].obj=o,h()},h=function(){d.on({resize:function(){d.width()<1024&&_()}}),p.on({click:function(){return w($(this).attr("data-popup")),!1}}),s.on({click:function(n){n.stopPropagation()}}),i.on({click:function(){return _(),!1}}),e.on({click:function(){return _(),!1}})},w=function(n){v(n),i.addClass("popup_opened"),d.width()<1024&&(c.css({overflowY:"hidden"}),f())},v=function(n){var o=t.filter(".popup__"+n);o.css({display:"block"})};r()};
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),1!=s||l||(p.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}})),$(".nice-scroll").on({scroll:function(){u&&v()}})},g=function(){!s||l?y():1==s&&_()},_=function(){p.addClass("websters-select_custom")},y=function(){p.addClass("websters-select_mobile")},m=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
//# sourceMappingURL=data:application/json;base64,
