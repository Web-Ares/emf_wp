!function(){$(function(){$(".tabs").each(function(){new e({obj:$(this),showType:2,activeIndex:function(e){console.log(e)}})})});var e=function(e){var t=this,i=e.obj,n=e.showType,o=e.activeIndex,s=$(window),c=i.find(">dl>dt"),a=i.find(">dl>dd"),d=!0,l=function(){1==n?i.addClass("tabs_animated1"):2==n&&i.addClass("tabs_animated2")},r=function(e){e.niceScroll({cursorcolor:"#fec303",cursoropacitymin:"1",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",enablemousewheel:!0})},u=function(e){var t=e,i=t.next();i.find(".tabs__content");t.hasClass("active")||(c.removeClass("active"),t.addClass("active"),r(i),f(a),C(i)),o(t.index()/2)},h=function(){var e=document.createElement("p");e.style.width="100%",e.style.height="200px";var t=document.createElement("div");t.style.position="absolute",t.style.top="0px",t.style.left="0px",t.style.visibility="hidden",t.style.width="200px",t.style.height="150px",t.style.overflow="hidden",t.appendChild(e),document.body.appendChild(t);var i=e.offsetWidth;t.style.overflow="scroll";var n=e.offsetWidth;return i==n&&(n=t.clientWidth),document.body.removeChild(t),i-n},f=function(e){e.getNiceScroll().remove()},v=function(){c.on({click:function(){s.width()<1024-h()?b($(this)):u($(this))}}),s.on({load:function(){s.width()>=1024-h()?(p(),y(),d=!1):d=!0},resize:function(){s.width()>=1024?(p(),y(),d=!1):(w(),f(a),d=!0)}})},m=function(){i[0].obj=t,v(),l()},p=function(){a.css({top:c.eq(-1).position().top+c.eq(-1).innerHeight()})},y=function(){d&&(c.eq(0).addClass("active"),r(c.eq(0).next()))},b=function(e){var t=e,i=t.next(),n=i.find(".tabs__content");t.hasClass("active")?(t.removeClass("active"),i.removeAttr("style")):(c.removeClass("active"),a.removeAttr("style"),t.addClass("active"),i.css({display:"block"}),s.width()<1024-h()&&(a.height(0),i.innerHeight(n.innerHeight())))},w=function(){i.removeAttr("style"),c.removeClass("active"),a.removeAttr("style")},C=function(e){setTimeout(function(){e.getNiceScroll().resize()},300)};m()}}();
//# sourceMappingURL=data:application/json;base64,
