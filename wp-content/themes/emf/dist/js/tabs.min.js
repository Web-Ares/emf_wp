!function(){$(function(){$(".tabs").each(function(){new e({obj:$(this),showType:2,activeIndex:function(e){console.log(e)}})})});var e=function(e){var t=this,n=e.obj,i=e.showType,o=e.activeIndex,s=$(window),c=n.find(">dl>dt"),a=n.find(">dl>dd"),r=!0,d=function(){1==i?n.addClass("tabs_animated1"):2==i&&n.addClass("tabs_animated2")},l=function(e){e.niceScroll({cursorcolor:"#fec303",cursoropacitymin:"1",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",enablemousewheel:!0})},u=function(e){var t=e,n=t.next();n.find(".tabs__content");t.hasClass("active")||(c.removeClass("active"),f(a),t.addClass("active"),l(n),p(n)),o(t.index()/2)},f=function(e){e.getNiceScroll().remove()},v=function(){c.on({click:function(){s.width()<1024?w($(this)):u($(this))}}),s.on({load:function(){s.width()>=1024?(m(),b(),r=!1):r=!0},resize:function(){s.width()>=1024?(r&&C(),m(),b(),r=!1):(r||(C(),f(a)),r=!0)}})},h=function(){n[0].obj=t,v(),d()},m=function(){a.css({top:c.eq(-1).position().top+c.eq(-1).innerHeight()})},b=function(){r&&(c.eq(0).addClass("active"),l(c.eq(0).next()))},w=function(e){var t=e,n=t.next(),i=n.find(".tabs__content");t.hasClass("active")?(t.removeClass("active"),n.removeAttr("style")):(c.removeClass("active"),a.removeAttr("style"),t.addClass("active"),n.css({display:"block"}),s.width()<1024&&(a.height(0),n.innerHeight(i.innerHeight())))},C=function(){n.removeAttr("style"),c.removeClass("active"),a.removeAttr("style")},p=function(e){setTimeout(function(){e.getNiceScroll().resize()},300)};h()}}();
//# sourceMappingURL=data:application/json;base64,
