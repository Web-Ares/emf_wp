!function(){$(function(){$(".tabs").each(function(){new t({obj:$(this),showType:2,activeIndex:function(t){}})})});var t=function(t){var e,n=this,i=t.obj,s=t.showType,a=t.activeIndex,o=$(window),c=i.find(">dl>dt"),r=i.find(">dl>dd"),d=!0,f=function(){1==s?i.addClass("tabs_animated1"):2==s&&i.addClass("tabs_animated2")},l=function(t){t.perfectScrollbar(),setTimeout(function(){t.perfectScrollbar("update")},10)},u=function(t){var e=t,n=e.next();n.find(".tabs__content");e.hasClass("active")||(c.removeClass("active"),v(r),e.addClass("active"),setTimeout(function(){l(n)},500)),a(e.index()/2)},v=function(t){t.perfectScrollbar("destroy")},p=function(){c.on({click:function(){o.width()<1024?C($(this)):u($(this))}}),o.on({load:function(){o.width()>=1024?(b(),m(),d=!1):d=!0},resize:function(){w(),o.width()>=1024?(d&&_(),b(),m(),d=!1):(d||(_(),v(r)),d=!0)}})},h=function(){i[0].obj=n,p(),f(),y()},b=function(){r.css({top:c.eq(-1).position().top+c.eq(-1).innerHeight()})},m=function(){d&&(c.eq(0).addClass("active"),l(c.eq(0).next()))},C=function(t){var e=t,n=e.next(),i=n.find(".tabs__content");e.hasClass("active")?(e.removeClass("active"),n.removeAttr("style")):(c.removeClass("active"),r.removeAttr("style"),e.addClass("active"),n.css({display:"block"}),o.width()<1024&&(r.height(0),n.innerHeight(i.innerHeight())))},y=function(){e=$('<span class="tabs__separator"></span>'),i.append(e),w()},w=function(){var t=c.filter(":last-of-type").position().top+c.filter(":last-of-type").innerHeight();e.css({top:t})},_=function(){i.removeAttr("style"),c.removeClass("active"),r.removeAttr("style")};h()}}();
//# sourceMappingURL=data:application/json;base64,
