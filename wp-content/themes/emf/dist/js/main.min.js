!function(){$(function(){"use strict";$.each($(".nice-scroll"),function(){new i($(this))}),$.each($(".site"),function(){new e($(this))}),$.each($(".site__content__wrap"),function(){new n($(this))}),$.each($(".site__header"),function(){new t($(this))}),$.each($(".menu"),function(){new i($(this))}),$.each($("body"),function(){new o($(this))}),$.each($(".gallery"),function(){new s($(this))}),$.each($(".site__read-more"),function(){new c($(this))}),$.each($(".accordion"),function(){new d($(this))}),$.each($(".awards"),function(){new r($(this))}),$.each($(".popup-info"),function(){new l($(this))})});var e=function(e){var n=this,t=e,i=$(window),o=function(){var e=document.createElement("p");e.style.width="100%",e.style.height="200px";var n=document.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.visibility="hidden",n.style.width="200px",n.style.height="150px",n.style.overflow="hidden",n.appendChild(e),document.body.appendChild(n);var t=e.offsetWidth;n.style.overflow="scroll";var i=e.offsetWidth;return t==i&&(i=n.clientWidth),document.body.removeChild(n),t-i},s=function(){i.on({resize:function(){i.width()>=1024-o()&&d()}})},c=function(){s(),i.width()>=1024-o()&&d(),t[0].obj=n},d=function(){i.height()>=500?t.css({"min-height":"100%"}):t.css({"min-height":"500px"})};c()},n=function(e){var n=this,t=e,i=$(window),o=$(".site__content > .site__title"),s=function(){var e=document.createElement("p");e.style.width="100%",e.style.height="200px";var n=document.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.visibility="hidden",n.style.width="200px",n.style.height="150px",n.style.overflow="hidden",n.appendChild(e),document.body.appendChild(n);var t=e.offsetWidth;n.style.overflow="scroll";var i=e.offsetWidth;return t==i&&(i=n.clientWidth),document.body.removeChild(n),t-i},c=function(){i.on({resize:function(){i.width()>=1024-s()?r():l()},load:function(){i.width()>=1024-s()&&r()}})},d=function(){c(),t[0].obj=n},r=function(){var e=o.offset().top+o.outerHeight(!0);t.css({top:e})},l=function(){t.css({top:"auto"})};d()},t=function(e){var n=this,t=e,i=$(window),o=t.find(".site__header__btn"),s=(t.find(".menu"),$("html")),c=function(){i.on({resize:function(){t.hasClass("opened")&&(t.removeClass("opened"),s.css({"overflow-y":"auto"}))}}),o.on({click:function(){return t.hasClass("opened")?(t.removeClass("opened"),s.css({"overflow-y":"auto"})):(t.addClass("opened"),s.css({"overflow-y":"hidden"})),!1}})},d=function(){c(),t[0].obj=n};d()},i=function(e){var n=this,t=e,i=$(window),o=function(){setTimeout(function(){t.niceScroll({cursorcolor:"#fec303",cursoropacitymin:"1",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",enablemousewheel:!0})},10),setTimeout(function(){t.getNiceScroll().resize()},350)},s=function(){i.on({load:function(){o()}})},c=function(){s(),t[0].obj=n};c()},o=function(e){var n=this,t=e,i=$(window),o=$("body"),s=function(){i.on({resize:function(){d()}})},c=function(){s(),d(),t[0].obj=n},d=function(){var e;e=i.height()>500?100*(window.innerHeight/900)+"px":100*(500/900)+"px",o.css({"font-size":e})};c()},s=function(e){var n=this,t=e,i=e.find(".gallery__top"),o=e.find(".gallery__thumbs"),s=function(){var e=new Swiper(i,{nextButton:o.find(".swiper-button-next"),prevButton:o.find(".swiper-button-prev"),spaceBetween:10,onSlideChangeStart:function(e){var t=e.activeIndex;$(n.slides).removeClass("is-selected"),$(n.slides).eq(t).addClass("is-selected"),n.slideTo(t,500,!1)}}),n=new Swiper(o.find(".swiper-container"),{spaceBetween:37,freeMode:!0,centeredSlides:!1,slidesPerView:"auto",touchRatio:.2,onClick:function(n){var t=n.clickedIndex;n.activeIndex=t,n.updateClasses(),$(n.slides).removeClass("is-selected"),$(n.clickedSlide).addClass("is-selected"),e.slideTo(t,0,!1)},onInit:function(){var e,n=o.find(".swiper-slide").length;10>n&&(n="0"+n),o.find(".gallery__thumbs-total-count").text(n),o.find(".swiper-slide").each(function(){e=$(this).index()+1,10>e?e="0"+e:0==e[0]&&(e=e.slice(1)),$(this).find(".gallery__thumbs-current-num").text(e)})}})},c=function(){t[0].obj=n,s()};c()},c=function(e){var n,t=this,i=e,o=($(window),$("body"),function(){i.on({click:function(){return d(),!1}})}),s=function(){o(),c(),i[0].obj=t},c=function(){n=i.parent().nextAll(),n.css({display:"none"})},d=function(){n.css({display:"block"}),i.css({display:"none"})};s()},d=function(e){var n=this,t=e,i=t.find(">dl"),o=t.find(">dl>dt"),s=t.find(">dl>dd"),c=$(window),d=0,r=function(){c.on({load:function(){d=i.innerHeight()}}),o.on({click:function(){var e=$(this),n=e.next();return e.hasClass("active")?(e.removeClass("active"),n.css({display:"none"}),setTimeout(function(){n.removeClass("visible")},300),i.css({"min-height":"1px"})):(o.removeClass("active"),s.css({display:"none"}),setTimeout(function(){s.removeClass("visible")},300),e.addClass("active"),n.css({display:"block"}),setTimeout(function(){n.addClass("visible")},300),i.css({"min-height":d+n.innerHeight()})),!1}})},l=function(){r(),u(),t[0].obj=n},u=function(){};l()},r=function(e){var n=this,t=e,i=t.find(".swiper-container"),o=function(){new Swiper(i,{pagination:i.find(".swiper-pagination"),paginationClickable:!0,nextButton:i.find(".swiper-button-next"),prevButton:i.find(".swiper-button-prev"),spaceBetween:30})},s=function(){t[0].obj=n,o()};s()},l=function(e){var n=this,t=e,i=$(window),o=function(){setTimeout(function(){t.niceScroll({cursorcolor:"#27282d",cursoropacitymin:"1",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",enablemousewheel:!0})},10),setTimeout(function(){t.getNiceScroll().resize()},350)},s=function(){i.on({load:function(){o()}})},c=function(){s(),t[0].obj=n};c()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,i,n=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=n,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),1!=s||l||(p.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}}))},g=function(){!s||l?y():1==s&&_()},_=function(){p.addClass("websters-select_custom")},y=function(){p.addClass("websters-select_mobile")},m=function(){var e=$("select"),n=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?n.append('<li class="active">'+t.text()+"</li>"):n.append("<li>"+t.text()+"</li>")}),t.append(n),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),i=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};n.checkOpened=function(){return u},n.close=function(){v()},b()}}();
!function(){$(function(){$(".popup").each(function(){new n($(this))})});var n=function(n){var o=this,t=$(".popup__open"),i=n,p=i.find(".popup__close, .popup__cancel"),c=i.find(".popup__wrap"),u=i.find(".popup__content"),e=$("html"),s=$(".site__content"),f=$(window),a=setTimeout(function(){},1),d=function(){s.css({"z-index":4})},r=function(){s.attr("style","")},l=function(){i.css({overflowY:"hidden"}),e.css({overflowY:"auto",paddingRight:0}),i.removeClass("popup_opened"),i.addClass("popup_hide"),a=setTimeout(function(){i.css({overflowY:"auto"}),i.removeClass("popup_hide")},300),f.width()<1024&&r()},_=function(){i[0].obj=o,h()},h=function(){f.on({resize:function(){f.width()<1024&&l()}}),t.on({click:function(){return w($(this).attr("data-popup")),!1}}),c.on({click:function(n){n.stopPropagation()}}),i.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},w=function(n){v(n),i.addClass("popup_opened"),f.width()<1024&&d()},v=function(n){var o=u.filter(".popup__"+n);u.css({display:"none"}),o.css({display:"block"})};_()}}();
//# sourceMappingURL=data:application/json;base64,
