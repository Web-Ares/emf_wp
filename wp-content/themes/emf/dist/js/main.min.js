!function(){$(function(){"use strict";$.each($(".nice-scroll"),function(){new i($(this))}),$.each($(".site"),function(){new n($(this))}),$.each($(".site__content__wrap"),function(){new t($(this))}),$.each($(".site__header"),function(){new e($(this))}),$.each($(".menu"),function(){new i($(this))}),$.each($("body"),function(){new o($(this))}),$.each($(".gallery"),function(){new c($(this))}),$.each($(".site__read-more"),function(){new s($(this))}),$.each($(".accordion dl"),function(){new Accordion($(this))}),$.each($(".awards"),function(){new a($(this))}),$.each($(".popup-info"),function(){new r($(this))}),$.each($(".about-portfolio"),function(){new u($(this))}),$.each($(".services-areas__gallery"),function(){new l($(this))}),$.each($(".ajax-block"),function(){new d($(this))}),$.each($(".contact__sign"),function(){new f($(this))}),$.each($(".accordion_careers"),function(){new h($(this))}),$.each($(".datepicker"),function(){new p($(this))}),$.each($(".nice-checkbox"),function(){new w($(this))}),$.each($(".contact__file"),function(){new v($(this))}),$.each($(".resources__links-item_comments"),function(){new _($(this))}),$.each($(".resources__ajax-wrap"),function(){new m($(this))})});var n=function(n){var t=this,e=n,i=$(window),o=function(){i.on({resize:function(){i.width()>=1024&&s()}})},c=function(){o(),i.width()>=1024&&s(),e[0].obj=t},s=function(){i.height()>=500?e.css({"min-height":"100%"}):e.css({"min-height":"500px"})};c()},t=function(n){var t=this,e=n,i=$(window),o=$(".site__content > .site__title"),c=function(){i.on({resize:function(){i.width()>=1024?a():r()},load:function(){i.width()>=1024&&a()}})},s=function(){c(),e[0].obj=t},a=function(){var n=o.offset().top+o.outerHeight(!0);e.css({top:n})},r=function(){e.css({top:"auto"})};s()},e=function(n){var t=this,e=n,i=$(window),o=e.find(".site__header__btn"),c=e.find(".site__header__items"),s=$("html"),a=$("body"),r=function(){e.removeClass("opened"),s.css({"overflow-y":"auto"}),a.css({"overflow-y":"auto"}),c.attr("style","")},u=function(){i.on({resize:function(){e.hasClass("opened")&&r()}}),o.on({click:function(){return e.hasClass("opened")?r():l(),!1}})},l=function(){e.addClass("opened"),s.css({"overflow-y":"hidden"}),a.css({"overflow-y":"hidden"}),f()},d=function(){u(),e[0].obj=t},f=function(){c.height(i.height()-c.offset().top)};d()},i=function(n){var t=this,e=n,i=$(window),o=!0,c=function(){setTimeout(function(){e.niceScroll({cursorcolor:"#fec303",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0})},10)},s=function(){i.on({load:function(){o=i.width()>=1024,o&&c()},resize:function(){i.width()>=1024?(o&&c(),o=!1):(o||a(),o=!0)}})},a=function(){e.getNiceScroll().remove(),e.css({"overflow-y":"auto"})},r=function(){s(),e[0].obj=t};r()},o=function(n){var t=this,e=n,i=$(window),o=$("body"),c=function(){i.on({resize:function(){i.width()>=1024?a():o.css({"font-size":"75px"})}})},s=function(){c(),i.width()>=1024&&a(),e[0].obj=t},a=function(){var n;n=i.height()>500?100*(window.innerHeight/900)+"px":100*(500/900)+"px",o.css({"font-size":n})};s()},c=function(n){var t,e,i=this,o=n,c=n.find(".gallery__top"),s=n.find(".gallery__thumbs"),a=$(window),r=!0,u=function(){t.destroy(!0,!0)},l=function(){c.length&&t.on("slideChangeStart",function(n){var t=n.activeIndex;$(e.slides).removeClass("is-selected"),$(e.slides).eq(t).addClass("is-selected"),e.slideTo(t,500,!1)}),a.on({load:function(){r=a.width()>=1024},resize:function(){o.hasClass("gallery_2")||(a.width()>=1024?(r&&(u(),setTimeout(function(){f()},10)),r=!1):(r||(u(),setTimeout(function(){f()},10)),r=!0))}})},d=function(){o.hasClass("gallery_2")?t=new Swiper(c,{nextButton:s.find(".swiper-button-next"),prevButton:s.find(".swiper-button-prev"),spaceBetween:10}):f(),e=new Swiper(s.find(".swiper-container"),{spaceBetween:37,freeMode:!0,centeredSlides:!1,slidesPerView:"auto",touchRatio:.2,onClick:function(n){var e=n.clickedIndex;n.activeIndex=e,n.updateClasses(),$(n.slides).removeClass("is-selected"),$(n.clickedSlide).addClass("is-selected"),t.slideTo(e,500,!1)},onInit:function(){var n,t=s.find(".swiper-slide").length;t<10&&(t="0"+t),s.find(".gallery__thumbs-total-count").text(t),s.find(".swiper-slide").each(function(){n=$(this).index()+1,n<10?n="0"+n:0==n[0]&&(n=n.slice(1)),$(this).find(".gallery__thumbs-current-num").text(n)})}})},f=function(){t=a.width()>=1024?new Swiper(c,{nextButton:s.find(".swiper-button-next"),prevButton:s.find(".swiper-button-prev"),spaceBetween:10,effect:"fade",fade:{crossFade:!0}}):new Swiper(c,{nextButton:s.find(".swiper-button-next"),prevButton:s.find(".swiper-button-prev"),spaceBetween:10})},h=function(){o[0].obj=i,d(),l()};h()},s=function(n){var t,e=this,i=n,o=($(window),$("body"),function(){i.on({click:function(){return a(),!1}})}),c=function(){o(),s(),i[0].obj=e},s=function(){t=i.parent().nextAll(),t.css({display:"none"})},a=function(){t.css({display:"block"}),i.css({display:"none"})};c()},a=function(n){var t,e=this,i=n,o=i.find(".swiper-container"),c=$(".awards__text-wrap div"),s=function(){t.on("slideChangeStart",function(){c.addClass("hidden"),c.html("")}),t.on("slideChangeEnd",function(n){var t=n.activeIndex,e=n.slides.eq(t).find(".awards__text");c.removeClass("hidden"),c.html(e.html())})},a=function(){t=new Swiper(o,{pagination:o.find(".swiper-pagination"),paginationClickable:!0,nextButton:o.find(".swiper-button-next"),prevButton:o.find(".swiper-button-prev"),loop:!0,onInit:function(n){var t=n.activeIndex,e=n.slides.eq(t).find(".awards__text");c.html(e.html())}})},r=function(){i[0].obj=e,a(),s()};r()},r=function(n){var t=this,e=n,i=$(window),o=!0,c=function(){setTimeout(function(){e.niceScroll({cursorcolor:"#27282d",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0})},10)},s=function(){i.on({load:function(){o=i.width()>=1024,o&&c()},resize:function(){i.width()>=1024?(o&&c(),o=!1):(o||r(),o=!0)}})},a=function(){s(),e[0].obj=t},r=function(){e.getNiceScroll().remove(),e.css({"overflow-y":"auto"})};a()},u=function(n){var t=n,e=t.find(".about-portfolio__item"),i=$(".gallery-popup"),o=i.find(".gallery-popup__close"),s=i.find(".gallery-popup__wrap"),a=i.find(".gallery-popup__preloader"),r=$(window),u=$("html"),l=$("body"),d=!0,f=new XMLHttpRequest,h=function(){e.on({click:function(){var n=$(this);i.css({display:"block"}),r.width()<1024&&(u.css({"overflow-y":"hidden"}),l.css({"overflow-y":"hidden"})),_(n)}}),o.on({click:function(){return w(),!1}}),r.on({load:function(){d=r.width()>=1024},resize:function(){r.width()>=1024?(d&&p(),d=!1):(d||m(),d=!0)}})},p=function(){$(document).find(".gallery-popup__text").niceScroll({cursorcolor:"#fec303",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0}),setTimeout(function(){$(document).find(".gallery-popup__text").getNiceScroll().resize()},200)},w=function(){r.width()<1024&&(u.css({"overflow-y":"auto"}),l.css({"overflow-y":"auto"})),i.css({display:"none"}),a.css({display:"block"}),s.html("")},v=function(){h()},_=function(n){f.abort(),f=$.ajax({url:$("body").data("action"),data:{action:"get_gallery",id:n.attr("data-id")},dataType:"html",type:"get",success:function(n){s.html(n),setTimeout(function(){$(n).hasClass("gallery")&&$.each($(".gallery"),function(){new c($(this))}),r.width()>=1024&&p(),a.css({display:"none"})},500)},error:function(n){"abort"!=n.statusText&&alert("ERROR!!!")}})},m=function(){$(document).find(".gallery-popup__text").getNiceScroll().remove(),$(document).find(".gallery-popup__text").css({"overflow-y":"auto"})};v()},l=function(n){var t=this,e=n,i=(e.find(".swiper-container"),function(){new Swiper(e,{nextButton:e.find(".swiper-button-next"),prevButton:e.find(".swiper-button-prev"),loop:!0,spaceBetween:30})}),o=function(){e[0].obj=t,i()};o()},d=function(n){var t=n,e=t.find(".ajax-block__btn"),i=$(".ajax-block-"+t.attr("data-block")),o=$(".popup__preloader"),c=$(window),s=!0,a=new XMLHttpRequest,r=function(){e.on({click:function(){var n=$(this);n.hasClass("ajax-block__btn_loaded")||(e.removeClass("ajax-block__btn_loaded"),n.addClass("ajax-block__btn_loaded"),o.removeClass("hide"),i.html(""),i.css({display:"block"}),i.nextAll().css({display:"none"}),f(n))}}),c.on({load:function(){s=c.width()>=1024},resize:function(){c.width()>=1024?(s&&u(i.children()),s=!1):(s||h(i.children()),s=!0)}})},u=function(n){n.niceScroll({cursorcolor:"#27282d",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0}),setTimeout(function(){n.getNiceScroll().resize()},200)},l=function(){r()},f=function(n){a.abort(),a=$.ajax({url:$("body").attr("data-action"),data:{action:"get_areas",lvl:n.attr("data-lvl"),id:n.attr("data-id")},dataType:"html",type:"get",success:function(n){i.html(n),i.find(".ajax-block").length&&new d(i.find(".ajax-block")),i.find(".accordion").length&&$.each(i.find(".accordion_2 dl"),function(){new Accordion($(this))}),setTimeout(function(){c.width()>=1024&&u(i.children()),o.addClass("hide")},500)},error:function(n){"abort"!=n.statusText&&alert("ERROR!!!")}})},h=function(n){n.getNiceScroll().remove(),n.css({"overflow-y":"auto"})};l()},f=function(n){var t,e=this,i=n,o=i.find(".contact__sign-area"),c=i.find(".contact__sign-refresh"),s=$(".canvas_check"),a=$(window),r=function(){o.signature("destroy")},u=function(){c.on({click:function(){return o.signature("clear"),!1}}),a.on({resize:function(){r(),d()}}),s.on({click:function(){o.signature("isEmpty")?(o.addClass("contact__sign-area-red"),$(".sign_val").val("")):(t=o.signature("toSVG"),o.removeClass("contact__sign-area-red"),$(".sign_val").val(t))}})},l=function(){i[0].obj=e,u(),d()},d=function(){o.signature({thickness:1,color:"#ffffff"})};l()},h=function(n){var t=this,e=n,i=$(".careers_themes"),o=e.find(".apply"),c={},s=[],a=function(){o.on({click:function(){var n=$(this),t=n.data("value"),e=n.data("text1"),i=n.data("text2"),o=t;return n.hasClass("active")?(n.removeClass("active"),n.find("span").text(e),delete c[o]):(n.addClass("active"),n.find("span").text(i),c[o]=t),u(),!1}})},r=function(){e[0].obj=t,a()},u=function(){s=[];for(var n in c){var t=c[n];s.push(t)}i.val(s)};r()},p=function(n){var t=this,e=n,i=$(".nice-scroll"),o=$(window),c=function(){e.datepicker("hide"),e.blur()},s=function(){i.on({scroll:function(){c()}}),o.on({resize:function(){c()}})},a=function(){e[0].obj=t,r(),s()},r=function(){e.datepicker()};a()},w=function(n){var t=this,e=n,i=e.find("label"),o=function(){i.find("input:checkbox").off("click",function(){var n=$(this).attr("name");$(this).closest("form").find('input:checkbox[name="'+n+'"]').not(this).prop("checked",!1)}),i.click(function(n){return $(this).hasClass("active")?($(this).removeClass("active"),$(this).find("input").attr("checked",!1)):($(this).addClass("active"),$(this).find("input").attr("checked",!0)),n.stopPropagation(),n.cancelBubble=!0,!1})},c=function(){e[0].obj=t,o()};c()},v=function(n){var t=this,e=n,i=e.find("input[type=file]"),o=e.find("input[type=text]"),c=function(){i.on({change:function(){o.val($(this).val())}})},s=function(){e[0].obj=t,c()};s()},_=function(n){var t=this,e=n,i=$(".comments-customer"),o=$(".site__content__inner"),c=$(".site__form"),s=$("html, body"),a=$(window),r=function(){e.hasClass("resources__item")||e.on({click:function(){if(a.width()<1024){var n;n=i.length?i.offset().top:c.offset().top,s.stop(!0,!1),s.animate({scrollTop:n},300)}else{var n,t;i.length?(n=i.position().top,t=o.scrollTop()):(n=c.position().top,t=o.scrollTop()),o.stop(!0,!1),o.animate({scrollTop:n+t},300)}return!1}})},u=function(){e[0].obj=t,r()};u()},m=function(n){var t=n,e=t.find(".resources__item"),i=t.find(".resources__items"),o=$(".resources__preloader"),c=(e.find(".resources__links-item_tags>a"),$(window),$("html"),$("body"),new XMLHttpRequest),s=function(){$(document).on("click",".resources__links-item_tags>a",function(){var n=$(this);return i.html(""),o.addClass("visible"),r(n),!1})},a=function(){s()},r=function(n){c.abort(),c=$.ajax({url:$("body").data("action"),data:{action:"get_resources",tagId:n.attr("data-id")},dataType:"html",type:"get",success:function(n){i.html(n),setTimeout(function(){o.removeClass("visible")},500)},error:function(n){"abort"!=n.statusText&&alert("ERROR!!!")}})};a()}}();var Accordion=function(n){var t=this,e=n,i=e.find(">dt"),o=e.find(">dd"),c=$(window),s=$(".site__content__inner"),a=$("html, body"),r=0,u=0,l=!0,d=function(n,t){i.removeClass("similar"),n.removeClass("active"),n.css({"margin-bottom":""}),t.removeClass("visible")},f=function(){c.on({resize:function(){i.filter(".active").length&&v(i.filter(".active"),i.filter(".active").next())}}),i.on({click:function(){var n=$(this),t=n.next();return n.hasClass("active")?d(n,t):l&&h(n,t),!1}})},h=function(n,t){l=!1,i.removeClass("active"),i.css({"margin-bottom":""}),o.removeClass("visible similar"),n.addClass("active"),v(n,t),w(n),t.addClass("visible"),setTimeout(function(){l=!0},300)},p=function(){e[0].obj=t,f(),_()},w=function(n){c.width()<1024?(u=n.offset().top,a.stop(!0,!1),a.animate({scrollTop:u},300)):(u=n.position().top+e.position().top+s.scrollTop(),n.hasClass("similar")||(s.stop(!0,!1),s.animate({scrollTop:u},300)))},v=function(n,t){n.css({"margin-bottom":t.innerHeight()-1}),setTimeout(function(){var e=n.position().top,o=n.innerHeight();r=e+o,t.css({top:r}),i.each(function(){$(this).position().top==e?$(this).addClass("similar"):$(this).removeClass("similar")})},310)},_=function(){e.parent().hasClass("accordion_2")&&(2==i.length?i.addClass("half"):1==i.length&&i.addClass("full"))};p()};
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),1!=s||l||(p.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}})),$(".nice-scroll").on({scroll:function(){u&&v()}})},g=function(){!s||l?y():1==s&&_()},_=function(){p.addClass("websters-select_custom")},y=function(){p.addClass("websters-select_mobile")},m=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
!function(){$(function(){$(".popup").each(function(){new Popup($(this))})})}();var Popup=function(n){var o=this,p=$(".popup__open"),i=n,t=i.find(".popup__close, .popup__cancel"),e=i.find(".popup__wrap"),s=i.find(".popup__content"),c=$("html, body"),d=$(".site__content"),u=$(window),a=!0,f=setTimeout(function(){},1),l=function(){d.css({"z-index":4})},_=function(){d.css({"z-index":2})},r=function(){i.css({overflowY:"hidden"}),i.removeClass("popup_opened"),i.addClass("popup_hide"),f=setTimeout(function(){i.css({overflowY:"auto"}),i.removeClass("popup_hide")},300),u.width()<1024&&(c.css({overflowY:"auto",paddingRight:0}),_()),s.css({display:"none"}),i.find(".popup__addresses").length&&(i.find(".popup__addresses").children().css({display:"none"}),i.find(".popup__addresses").children().html(""),p.removeClass("ajax-block__btn_loaded"))},h=function(){i[0].obj=o,w()},w=function(){u.on({load:function(){a=u.width()>=1024},resize:function(){u.width()>=1024?a=!1:(a||r(),a=!0)}}),p.on({click:function(){return v($(this).attr("data-popup")),!1}}),e.on({click:function(n){n.stopPropagation()}}),i.on({click:function(){return r(),!1}}),t.on({click:function(){return r(),!1}})},v=function(n){m(n),i.addClass("popup_opened"),u.width()<1024&&(c.css({overflowY:"hidden"}),l())},m=function(n){var o=s.filter(".popup__"+n);o.css({display:"block"})};h()};
//# sourceMappingURL=data:application/json;base64,
