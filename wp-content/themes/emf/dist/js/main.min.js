!function(){$(function(){"use strict";$.each($(".nice-scroll"),function(){new i($(this))}),$.each($(".site"),function(){new n($(this))}),$.each($(".site__content__wrap"),function(){new e($(this))}),$.each($(".site__header"),function(){new t($(this))}),$.each($(".menu"),function(){new i($(this))}),$.each($("body"),function(){new o($(this))}),$.each($(".gallery"),function(){new s($(this))}),$.each($(".site__read-more"),function(){new c($(this))}),$.each($(".accordion"),function(){new r($(this))}),$.each($(".awards"),function(){new l($(this))}),$.each($(".popup-info"),function(){new d($(this))}),$.each($(".about-portfolio"),function(){new u($(this))})});var n=function(n){var e=this,t=n,i=$(window),o=function(){var n=document.createElement("p");n.style.width="100%",n.style.height="200px";var e=document.createElement("div");e.style.position="absolute",e.style.top="0px",e.style.left="0px",e.style.visibility="hidden",e.style.width="200px",e.style.height="150px",e.style.overflow="hidden",e.appendChild(n),document.body.appendChild(e);var t=n.offsetWidth;e.style.overflow="scroll";var i=n.offsetWidth;return t==i&&(i=e.clientWidth),document.body.removeChild(e),t-i},s=function(){i.on({resize:function(){i.width()>=1024-o()&&r()}})},c=function(){s(),i.width()>=1024-o()&&r(),t[0].obj=e},r=function(){i.height()>=500?t.css({"min-height":"100%"}):t.css({"min-height":"500px"})};c()},e=function(n){var e=this,t=n,i=$(window),o=$(".site__content > .site__title"),s=function(){var n=document.createElement("p");n.style.width="100%",n.style.height="200px";var e=document.createElement("div");e.style.position="absolute",e.style.top="0px",e.style.left="0px",e.style.visibility="hidden",e.style.width="200px",e.style.height="150px",e.style.overflow="hidden",e.appendChild(n),document.body.appendChild(e);var t=n.offsetWidth;e.style.overflow="scroll";var i=n.offsetWidth;return t==i&&(i=e.clientWidth),document.body.removeChild(e),t-i},c=function(){i.on({resize:function(){i.width()>=1024-s()?l():d()},load:function(){i.width()>=1024-s()&&l()}})},r=function(){c(),t[0].obj=e},l=function(){var n=o.offset().top+o.outerHeight(!0);t.css({top:n})},d=function(){t.css({top:"auto"})};r()},t=function(n){var e=this,t=n,i=$(window),o=t.find(".site__header__btn"),s=(t.find(".menu"),$("html")),c=function(){i.on({resize:function(){t.hasClass("opened")&&(t.removeClass("opened"),s.css({"overflow-y":"auto"}))}}),o.on({click:function(){return t.hasClass("opened")?(t.removeClass("opened"),s.css({"overflow-y":"auto"})):(t.addClass("opened"),s.css({"overflow-y":"hidden"})),!1}})},r=function(){c(),t[0].obj=e};r()},i=function(n){var e=this,t=n,i=$(window),o=function(){setTimeout(function(){t.niceScroll({cursorcolor:"#fec303",cursoropacitymin:"1",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",enablemousewheel:!0})},10),setTimeout(function(){t.getNiceScroll().resize()},350)},s=function(){i.on({load:function(){o()}})},c=function(){s(),t[0].obj=e};c()},o=function(n){var e=this,t=n,i=$(window),o=$("body"),s=function(){i.on({resize:function(){r()}})},c=function(){s(),r(),t[0].obj=e},r=function(){var n;n=i.height()>500?100*(window.innerHeight/900)+"px":100*(500/900)+"px",o.css({"font-size":n})};c()},s=function(n){var e=this,t=n,i=n.find(".gallery__top"),o=n.find(".gallery__thumbs"),s=function(){var n=new Swiper(i,{nextButton:o.find(".swiper-button-next"),prevButton:o.find(".swiper-button-prev"),spaceBetween:10,onSlideChangeStart:function(n){var t=n.activeIndex;$(e.slides).removeClass("is-selected"),$(e.slides).eq(t).addClass("is-selected"),e.slideTo(t,500,!1)}}),e=new Swiper(o.find(".swiper-container"),{spaceBetween:37,freeMode:!0,centeredSlides:!1,slidesPerView:"auto",touchRatio:.2,onClick:function(e){var t=e.clickedIndex;e.activeIndex=t,e.updateClasses(),$(e.slides).removeClass("is-selected"),$(e.clickedSlide).addClass("is-selected"),n.slideTo(t,500,!1)},onInit:function(){var n,e=o.find(".swiper-slide").length;10>e&&(e="0"+e),o.find(".gallery__thumbs-total-count").text(e),o.find(".swiper-slide").each(function(){n=$(this).index()+1,10>n?n="0"+n:0==n[0]&&(n=n.slice(1)),$(this).find(".gallery__thumbs-current-num").text(n)})}})},c=function(){t[0].obj=e,s()};c()},c=function(n){var e,t=this,i=n,o=($(window),$("body"),function(){i.on({click:function(){return r(),!1}})}),s=function(){o(),c(),i[0].obj=t},c=function(){e=i.parent().nextAll(),e.css({display:"none"})},r=function(){e.css({display:"block"}),i.css({display:"none"})};s()},r=function(n){var e=this,t=n,i=t.find(">dl"),o=t.find(">dl>dt"),s=t.find(">dl>dd"),c=$(window),r=0,l=function(){c.on({load:function(){r=i.innerHeight()}}),o.on({click:function(){var n=$(this),e=n.next();return n.hasClass("active")?(n.removeClass("active"),e.css({display:"none"}),setTimeout(function(){e.removeClass("visible")},300),i.css({"min-height":"1px"})):(o.removeClass("active"),s.css({display:"none"}),setTimeout(function(){s.removeClass("visible")},300),n.addClass("active"),e.css({display:"block"}),setTimeout(function(){e.addClass("visible")},300),i.css({"min-height":r+e.innerHeight()})),!1}})},d=function(){l(),u(),t[0].obj=e},u=function(){};d()},l=function(n){var e=this,t=n,i=t.find(".swiper-container"),o=function(){new Swiper(i,{pagination:i.find(".swiper-pagination"),paginationClickable:!0,nextButton:i.find(".swiper-button-next"),prevButton:i.find(".swiper-button-prev"),spaceBetween:30})},s=function(){t[0].obj=e,o()};s()},d=function(n){var e=this,t=n,i=$(window),o=function(){setTimeout(function(){t.niceScroll({cursorcolor:"#27282d",cursoropacitymin:"1",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",enablemousewheel:!0})},10),setTimeout(function(){t.getNiceScroll().resize()},350)},s=function(){i.on({load:function(){o()}})},c=function(){s(),t[0].obj=e};c()},u=function(n){var e=n,t=$(".gallery-popup"),i=t.find(".gallery-popup__close"),o=t.find(".gallery-popup__wrap"),c=t.find(".gallery-popup__preloader"),r=$(window),l=$("html"),d=new XMLHttpRequest,u=function(){e.on({click:function(){var n=$(this);t.css({display:"block"}),r.width()<1024&&l.css({"overflow-y":"hidden"}),p(n)}}),i.on({click:function(){return f(),!1}})},a=function(){$(document).find(".gallery-popup__text").niceScroll({cursorcolor:"#fec303",cursoropacitymin:"1",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",enablemousewheel:!0})},f=function(){r.width()<1024&&l.css({"overflow-y":"auto"}),t.css({display:"none"}),c.css({display:"block"}),o.html("")},h=function(){u()},p=function(e){d.abort(),d=$.ajax({url:n.attr("data-action"),data:{id:e.attr("data-id")},dataType:"json",type:"get",success:function(n){o.html(n.html),$(n.html).hasClass("gallery")&&setTimeout(function(){$.each($(".gallery"),function(){new s($(this))}),a(),c.css({display:"none"})},500)},error:function(n){"abort"!=n.statusText&&alert("ERROR!!!")}})};h()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,i,n=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=n,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),1!=s||l||(p.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}}))},g=function(){!s||l?y():1==s&&_()},_=function(){p.addClass("websters-select_custom")},y=function(){p.addClass("websters-select_mobile")},m=function(){var e=$("select"),n=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?n.append('<li class="active">'+t.text()+"</li>"):n.append("<li>"+t.text()+"</li>")}),t.append(n),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),i=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};n.checkOpened=function(){return u},n.close=function(){v()},b()}}();
!function(){$(function(){$(".popup").each(function(){new n($(this))})});var n=function(n){var o=this,t=$(".popup__open"),i=n,p=i.find(".popup__close, .popup__cancel"),c=i.find(".popup__wrap"),u=i.find(".popup__content"),e=$("html"),s=$(".site__content"),f=$(window),a=setTimeout(function(){},1),d=function(){s.css({"z-index":4})},r=function(){s.attr("style","")},l=function(){i.css({overflowY:"hidden"}),e.css({overflowY:"auto",paddingRight:0}),i.removeClass("popup_opened"),i.addClass("popup_hide"),a=setTimeout(function(){i.css({overflowY:"auto"}),i.removeClass("popup_hide")},300),f.width()<1024&&r()},_=function(){i[0].obj=o,h()},h=function(){f.on({resize:function(){f.width()<1024&&l()}}),t.on({click:function(){return w($(this).attr("data-popup")),!1}}),c.on({click:function(n){n.stopPropagation()}}),i.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},w=function(n){v(n),i.addClass("popup_opened"),f.width()<1024&&d()},v=function(n){var o=u.filter(".popup__"+n);u.css({display:"none"}),o.css({display:"block"})};_()}}();
//# sourceMappingURL=data:application/json;base64,
