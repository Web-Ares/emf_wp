!function(){$(function(){"use strict";$.each($(".nice-scroll"),function(){new o($(this))}),$.each($(".site"),function(){new t($(this))}),$.each($(".site__header"),function(){new n($(this))}),$.each($(".menu"),function(){new o($(this))}),$.each($(".top-links"),function(){new e($(this))}),$.each($(".logo"),function(){new i($(this))}),$.each($(".gallery"),function(){new s($(this))}),$.each($(".site__read-more"),function(){new c($(this))}),$.each($(".accordion dl"),function(){new Accordion($(this))}),$.each($(".awards"),function(){new a($(this))}),$.each($(".popup-info"),function(){new r($(this))}),$.each($(".about-portfolio"),function(){new l($(this))}),$.each($(".services-areas__gallery"),function(){new f($(this))}),$.each($(".ajax-block"),function(){new u($(this))}),$.each($(".contact__sign"),function(){new d($(this))}),$.each($(".accordion_careers"),function(){new p($(this))}),$.each($(".datepicker"),function(){new h($(this))}),$.each($(".nice-checkbox"),function(){new w($(this))}),$.each($(".contact__file"),function(){new v($(this))}),$.each($(".resources__links-item_comments"),function(){new _($(this))}),$.each($(".resources__ajax-wrap"),function(){new m($(this))})});var t=function(t){var n=this,e=t,i=$(window),o=function(){i.on({resize:function(){i.width()>=1024&&c()}})},s=function(){o(),i.width()>=1024&&c(),e[0].obj=n},c=function(){i.height()>=500?e.css({"min-height":"100%"}):e.css({"min-height":"500px"})};s()},n=function(t){var n=this,e=t,i=$(window),o=e.find(".site__header__btn"),s=e.find(".site__header__items"),c=$("html"),a=$("body"),r=function(){e.removeClass("opened"),c.css({"overflow-y":"auto"}),a.css({"overflow-y":"auto"}),s.attr("style","")},l=function(){i.on({resize:function(){e.hasClass("opened")&&r()}}),o.on({click:function(){return e.hasClass("opened")?r():f(),!1}})},f=function(){e.addClass("opened"),c.css({"overflow-y":"hidden"}),a.css({"overflow-y":"hidden"}),d()},u=function(){l(),e[0].obj=n},d=function(){s.height(i.height()-s.offset().top)};u()},e=function(t){var n=this,e=t,i=e.find(".top-links__item"),o=function(){i.on({click:function(){var t=$(this);t.hasClass("opened")?t.removeClass("opened"):(i.removeClass("opened"),t.addClass("opened"))}})},s=function(){o(),e[0].obj=n};s()},i=function(t){var n=this,e=t,i=$(window),o=function(){i.on({resize:function(){e.removeClass("logo_amin"),setTimeout(function(){e.addClass("logo_amin")},50)}})},s=function(){o(),e[0].obj=n};s()},o=function(t){var n=this,e=t,i=$(window),o=!0,s=function(){e.perfectScrollbar()},c=function(){i.on({load:function(){o=i.width()>=1024,o&&s()},resize:function(){i.width()>=1024?(o&&(s(),e.perfectScrollbar("update")),o=!1):(o||a(),o=!0)}})},a=function(){e.perfectScrollbar("destroy"),e.css({"overflow-y":"auto"})},r=function(){c(),e[0].obj=n};r()},s=function(t){var n,e,i=this,o=t,s=t.find(".gallery__top"),c=t.find(".gallery__thumbs"),a=$(window),r=!0,l=function(){n.destroy(!0,!0)},f=function(){s.length&&n.on("slideChangeStart",function(t){var n=t.activeIndex;$(e.slides).removeClass("is-selected"),$(e.slides).eq(n).addClass("is-selected"),e.slideTo(n,500,!1)}),a.on({load:function(){r=a.width()>=1024},resize:function(){o.hasClass("gallery_2")||(a.width()>=1024?(r&&(l(),setTimeout(function(){d()},10)),r=!1):(r||(l(),setTimeout(function(){d()},10)),r=!0))}})},u=function(){o.hasClass("gallery_2")?n=new Swiper(s,{nextButton:c.find(".swiper-button-next"),prevButton:c.find(".swiper-button-prev"),spaceBetween:10}):d(),e=new Swiper(c.find(".swiper-container"),{spaceBetween:37,freeMode:!0,centeredSlides:!1,slidesPerView:"auto",touchRatio:.2,onClick:function(t){var e=t.clickedIndex;t.activeIndex=e,t.updateClasses(),$(t.slides).removeClass("is-selected"),$(t.clickedSlide).addClass("is-selected"),n.slideTo(e,500,!1)},onInit:function(){var t,n=c.find(".swiper-slide").length;n<10&&(n="0"+n),c.find(".gallery__thumbs-total-count").text(n),c.find(".swiper-slide").each(function(){t=$(this).index()+1,t<10?t="0"+t:0==t[0]&&(t=t.slice(1)),$(this).find(".gallery__thumbs-current-num").text(t)})}})},d=function(){n=a.width()>=1024?new Swiper(s,{nextButton:c.find(".swiper-button-next"),prevButton:c.find(".swiper-button-prev"),spaceBetween:10,effect:"fade",fade:{crossFade:!0}}):new Swiper(s,{nextButton:c.find(".swiper-button-next"),prevButton:c.find(".swiper-button-prev"),spaceBetween:10})},p=function(){o[0].obj=i,u(),f()};p()},c=function(t){var n,e=this,i=t,o=($(window),$("body"),function(){i.on({click:function(){return a(),!1}})}),s=function(){o(),c(),i[0].obj=e},c=function(){n=i.parent().nextAll(),n.css({display:"none"})},a=function(){n.css({display:"block"}),i.css({display:"none"})};s()},a=function(t){var n,e=this,i=t,o=i.find(".swiper-container"),s=$(".awards__text-wrap div"),c=function(){n.on("slideChangeStart",function(){s.addClass("hidden"),s.html("")}),n.on("slideChangeEnd",function(t){var n=t.activeIndex,e=t.slides.eq(n).find(".awards__text");s.removeClass("hidden"),s.html(e.html())})},a=function(){n=new Swiper(o,{pagination:o.find(".swiper-pagination"),paginationClickable:!0,nextButton:o.find(".swiper-button-next"),prevButton:o.find(".swiper-button-prev"),loop:!0,onInit:function(t){var n=t.activeIndex,e=t.slides.eq(n).find(".awards__text");s.html(e.html())}})},r=function(){i[0].obj=e,a(),c()};r()},r=function(t){var n=this,e=t,i=$(window),o=!0,s=function(){setTimeout(function(){e.perfectScrollbar()},10)},c=function(){i.on({load:function(){o=i.width()>=1024,o&&s()},resize:function(){i.width()>=1024?(o&&s(),o=!1):(o||r(),o=!0)}})},a=function(){c(),e[0].obj=n},r=function(){e.perfectScrollbar("destroy"),e.css({"overflow-y":"auto"})};a()},l=function(t){var n=t,e=n.find(".about-portfolio__item"),i=$(".gallery-popup"),o=i.find(".gallery-popup__close"),c=i.find(".gallery-popup__wrap"),a=i.find(".gallery-popup__preloader"),r=$(window),l=$("html"),f=$("body"),u=!0,d=new XMLHttpRequest,p=function(){e.on({click:function(){var t=$(this);i.css({display:"block"}),r.width()<1024&&(l.css({"overflow-y":"hidden"}),f.css({"overflow-y":"hidden"})),_(t)}}),o.on({click:function(){return w(),!1}}),r.on({load:function(){u=r.width()>=1024},resize:function(){r.width()>=1024?(u&&h(),u=!1):(u||m(),u=!0)}})},h=function(){$(document).find(".gallery-popup__text").perfectScrollbar(),setTimeout(function(){$(document).find(".gallery-popup__text").perfectScrollbar("update")},200)},w=function(){r.width()<1024&&(l.css({"overflow-y":"auto"}),f.css({"overflow-y":"auto"})),i.css({display:"none"}),a.css({display:"block"}),c.html("")},v=function(){p()},_=function(t){d.abort(),d=$.ajax({url:$("body").data("action"),data:{action:"get_gallery",id:t.attr("data-id")},dataType:"html",type:"get",success:function(t){c.html(t),setTimeout(function(){$(t).hasClass("gallery")&&$.each($(".gallery"),function(){new s($(this))}),r.width()>=1024&&h(),a.css({display:"none"})},500)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},m=function(){$(document).find(".gallery-popup__text").perfectScrollbar("destroy"),$(document).find(".gallery-popup__text").css({"overflow-y":"auto"})};v()},f=function(t){var n=this,e=t,i=(e.find(".swiper-container"),function(){new Swiper(e,{nextButton:e.find(".swiper-button-next"),prevButton:e.find(".swiper-button-prev"),loop:!0,spaceBetween:30})}),o=function(){e[0].obj=n,i()};o()},u=function(t){var n=t,e=n.find(".ajax-block__btn"),i=$(".ajax-block-"+n.attr("data-block")),o=$(".popup__preloader"),s=$(window),c=!0,a=new XMLHttpRequest,r=function(){e.on({click:function(){var t=$(this);t.hasClass("ajax-block__btn_loaded")||(e.removeClass("ajax-block__btn_loaded"),t.addClass("ajax-block__btn_loaded"),o.removeClass("hide"),i.html(""),i.css({display:"block"}),i.nextAll().css({display:"none"}),d(t))}}),s.on({load:function(){c=s.width()>=1024},resize:function(){s.width()>=1024?(c&&l(i.children()),c=!1):(c||p(i.children()),c=!0)}})},l=function(t){t.perfectScrollbar(),setTimeout(function(){t.perfectScrollbar("update")},200)},f=function(){r()},d=function(t){a.abort(),a=$.ajax({url:$("body").attr("data-action"),data:{action:"get_areas",lvl:t.attr("data-lvl"),id:t.attr("data-id")},dataType:"html",type:"get",success:function(t){i.html(t),i.find(".ajax-block").length&&new u(i.find(".ajax-block")),i.find(".accordion").length&&$.each(i.find(".accordion_2 dl"),function(){new Accordion($(this))}),setTimeout(function(){s.width()>=1024&&l(i.children()),o.addClass("hide")},500)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},p=function(t){t.perfectScrollbar("destroy"),t.css({"overflow-y":"auto"})};f()},d=function(t){var n,e=this,i=t,o=i.find(".contact__sign-area"),s=i.find(".contact__sign-refresh"),c=$(".canvas_check"),a=$(window),r=function(){o.signature("destroy")},l=function(){s.on({click:function(){return o.signature("clear"),!1}}),a.on({resize:function(){r(),u()}}),c.on({click:function(){o.signature("isEmpty")?(o.addClass("contact__sign-area-red"),$(".sign_val").val("")):(n=o.signature("toSVG"),o.removeClass("contact__sign-area-red"),$(".sign_val").val(n))}})},f=function(){i[0].obj=e,l(),u()},u=function(){o.signature({thickness:1,color:"#ffffff"})};f()},p=function(t){var n,e,i=this,o=t,s=$(window),c=$(".careers_themes"),a=o.find(".apply"),r="",l=function(){$(".tabs>dl>dt:not(.active)").trigger("click")},f=function(){o.find("dl>dt").each(function(){var t=$(this),e=t.text();n.find("select").append('<option value="'+e+'">'+e+"</option>")}),e.text(n.find("select option:selected").text())},u=function(){s.on({load:function(){n=$(".vacancy"),e=n.find(".websters-select__item"),f(),n.find("select").on("change",function(){p(),h()})}}),a.on({click:function(){var t=$(this),i=t.data("value"),o=t.data("text2"),s=n.find("option").eq(i),c=s.text();return p(),t.hasClass("active")||(t.addClass("active"),t.find("span").text(o),r=i),h(),n.find("option").prop("selected",!1),s.prop("selected",!0),e.text(c),l(),!1}})},d=function(){o[0].obj=i,u()},p=function(){a.each(function(){var t=$(this),n=t.data("text1");t.removeClass("active"),t.find("span").text(n)}),r=""},h=function(){c.val(r)};d()},h=function(t){var n=this,e=t,i=$(".nice-scroll"),o=$(window),s=function(){e.datepicker("hide"),e.blur()},c=function(){i.on({scroll:function(){s()}}),o.on({resize:function(){s()}})},a=function(){e[0].obj=n,r(),c()},r=function(){e.datepicker()};a()},w=function(t){var n=this,e=t,i=e.find("label"),o=function(){i.find("input:checkbox").off("click",function(){var t=$(this).attr("name");$(this).closest("form").find('input:checkbox[name="'+t+'"]').not(this).prop("checked",!1)}),i.click(function(t){return $(this).hasClass("active")?($(this).removeClass("active"),$(this).find("input").attr("checked",!1)):($(this).addClass("active"),$(this).find("input").attr("checked",!0)),t.stopPropagation(),t.cancelBubble=!0,!1})},s=function(){e[0].obj=n,o()};s()},v=function(t){var n=this,e=t,i=e.find("input[type=file]"),o=e.find("input[type=text]"),s=function(){i.on({change:function(){o.val($(this).val())}})},c=function(){e[0].obj=n,s()};c()},_=function(t){var n=this,e=t,i=$(".comments-customer"),o=$(".site__content__inner"),s=$(".site__form"),c=$("html, body"),a=$(window),r=function(){e.parents(".resources__item").length||e.on({click:function(){if(a.width()<1024){var t;t=i.length?i.offset().top:s.offset().top,c.stop(!0,!1),c.animate({scrollTop:t},300)}else{var t,n;i.length?(t=i.position().top,n=o.scrollTop()):(t=s.position().top,n=o.scrollTop()),o.stop(!0,!1),o.animate({scrollTop:t+n},300)}return!1}})},l=function(){e[0].obj=n,r(),f()},f=function(){if(!e.parents(".resources__item").length&&e.parents(".site__content__wrap").hasClass("comments_scroll"))if(a.width()<1024){var t;t=i.offset().top,c.scrollTop(t)}else{var t,n;t=i.position().top,n=o.scrollTop(),o.scrollTop(t+n)}};l()},m=function(t){var n=t,e=n.find(".resources__items"),i=$(".resources__preloader"),o=n.parents(".nice-scroll"),s=new XMLHttpRequest,c=function(){$(document).on("click",".resources__links-item_tags>a",function(){var t=$(this);return e.html(""),i.addClass("visible"),r(t),!1})},a=function(){c()},r=function(t){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{action:"get_resources",tagId:t.attr("data-id")},dataType:"html",type:"get",success:function(t){e.html(t),setTimeout(function(){i.removeClass("visible"),l()},500)},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},l=function(){o.scrollTop=0,o.perfectScrollbar("update")};a()}}();var Accordion=function(t){var n=this,e=t,i=e.find(">dt"),o=e.find(">dd"),s=$(window),c=$(".site__content__inner"),a=$("html, body"),r=0,l=0,f=!0,u=function(t,n){i.removeClass("similar"),t.removeClass("active"),t.css({"margin-bottom":""}),n.removeClass("visible")},d=function(){s.on({resize:function(){i.filter(".active").length&&v(i.filter(".active"),i.filter(".active").next())}}),i.on({click:function(){var t=$(this),n=t.next();return t.hasClass("active")?u(t,n):f&&p(t,n),!1}})},p=function(t,n){f=!1,i.removeClass("active"),i.css({"margin-bottom":""}),o.removeClass("visible similar"),t.addClass("active"),v(t,n),setTimeout(function(){w(t)},300),n.addClass("visible"),setTimeout(function(){f=!0},300)},h=function(){e[0].obj=n,d(),_()},w=function(t){s.width()<1024?(l=t.offset().top,a.stop(!0,!1),a.animate({scrollTop:l},300)):(l=t.position().top+e.position().top+c.scrollTop(),t.hasClass("similar")||(c.stop(!0,!1),c.animate({scrollTop:l},300)))},v=function(t,n){t.css({"margin-bottom":n.innerHeight()-1}),setTimeout(function(){var e=t.position().top,o=t.innerHeight();r=e+o,n.css({top:r}),i.each(function(){$(this).position().top==e?$(this).addClass("similar"):$(this).removeClass("similar")})},310)},_=function(){e.parent().hasClass("accordion_2")&&(2==i.length?i.addClass("half"):1==i.length&&i.addClass("full"))};h()};
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),p=$('<span class="websters-select__item"></span>'),d=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(d),d=o.parent(),d.append('<div class="websters-select__arrow"></div>'),o.before(p),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),p.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),d.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){p.text($(this).find("option:selected").text())}),1!=s||l||(d.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}})),$(".nice-scroll").on({scroll:function(){u&&v()}})},g=function(){!s||l?y():1==s&&_()},_=function(){d.addClass("websters-select_custom")},y=function(){d.addClass("websters-select_mobile")},m=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),d.offset()),l=0,p=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==p?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),f.append(t),d.addClass("websters-select_opened"),t.css({width:d.outerWidth(),left:s.left,top:s.top+d.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
!function(){$(function(){$(".popup").each(function(){new Popup($(this))})})}();var Popup=function(n){var o=this,p=$(".popup__open"),i=n,t=i.find(".popup__close, .popup__cancel"),e=i.find(".popup__wrap"),s=i.find(".popup__content"),c=$("html, body"),d=$(".site__content"),u=$(window),a=!0,f=setTimeout(function(){},1),l=function(){d.css({"z-index":4})},_=function(){d.css({"z-index":2})},r=function(){i.css({overflowY:"hidden"}),i.removeClass("popup_opened"),i.addClass("popup_hide"),f=setTimeout(function(){i.css({overflowY:"auto"}),i.removeClass("popup_hide")},300),u.width()<1024&&(c.css({overflowY:"auto",paddingRight:0}),_()),s.css({display:"none"}),i.find(".popup__addresses").length&&(i.find(".popup__addresses").children().css({display:"none"}),i.find(".popup__addresses").children().html(""),p.removeClass("ajax-block__btn_loaded"))},h=function(){i[0].obj=o,w()},w=function(){u.on({load:function(){a=u.width()>=1024},resize:function(){u.width()>=1024?a=!1:(a||r(),a=!0)}}),p.on({click:function(){return v($(this).attr("data-popup")),!1}}),e.on({click:function(n){n.stopPropagation()}}),i.on({click:function(){return r(),!1}}),t.on({click:function(){return r(),!1}})},v=function(n){m(n),i.addClass("popup_opened"),u.width()<1024&&(c.css({overflowY:"hidden"}),l())},m=function(n){var o=s.filter(".popup__"+n);o.css({display:"block"})};h()};
//# sourceMappingURL=data:application/json;base64,
