!function(){$(function(){"use strict";$.each($(".nice-scroll"),function(){new e($(this))}),$.each($(".site"),function(){new n($(this))}),$.each($(".site__header"),function(){new t($(this))}),$.each($(".menu"),function(){new e($(this))}),$.each($(".gallery"),function(){new i($(this))}),$.each($(".site__read-more"),function(){new o($(this))}),$.each($(".accordion dl"),function(){new Accordion($(this))}),$.each($(".awards"),function(){new s($(this))}),$.each($(".popup-info"),function(){new c($(this))}),$.each($(".about-portfolio"),function(){new a($(this))}),$.each($(".services-areas__gallery"),function(){new r($(this))}),$.each($(".ajax-block"),function(){new l($(this))}),$.each($(".contact__sign"),function(){new u($(this))}),$.each($(".accordion_careers"),function(){new d($(this))}),$.each($(".datepicker"),function(){new f($(this))}),$.each($(".nice-checkbox"),function(){new h($(this))}),$.each($(".contact__file"),function(){new p($(this))}),$.each($(".resources__links-item_comments"),function(){new w($(this))}),$.each($(".resources__ajax-wrap"),function(){new v($(this))})});var n=function(n){var t=this,e=n,i=$(window),o=function(){i.on({resize:function(){i.width()>=1024&&c()}})},s=function(){o(),i.width()>=1024&&c(),e[0].obj=t},c=function(){i.height()>=500?e.css({"min-height":"100%"}):e.css({"min-height":"500px"})};s()},t=function(n){var t=this,e=n,i=$(window),o=e.find(".site__header__btn"),s=e.find(".site__header__items"),c=$("html"),a=$("body"),r=function(){e.removeClass("opened"),c.css({"overflow-y":"auto"}),a.css({"overflow-y":"auto"}),s.attr("style","")},l=function(){i.on({resize:function(){e.hasClass("opened")&&r()}}),o.on({click:function(){return e.hasClass("opened")?r():u(),!1}})},u=function(){e.addClass("opened"),c.css({"overflow-y":"hidden"}),a.css({"overflow-y":"hidden"}),f()},d=function(){l(),e[0].obj=t},f=function(){s.height(i.height()-s.offset().top)};d()},e=function(n){var t=this,e=n,i=$(window),o=!0,s=function(){setTimeout(function(){e.niceScroll({cursorcolor:"#fec303",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0})},10)},c=function(){i.on({load:function(){o=i.width()>=1024,o&&s()},resize:function(){i.width()>=1024?(o&&s(),o=!1):(o||a(),o=!0)}})},a=function(){e.getNiceScroll().remove(),e.css({"overflow-y":"auto"})},r=function(){c(),e[0].obj=t};r()},i=function(n){var t,e,i=this,o=n,s=n.find(".gallery__top"),c=n.find(".gallery__thumbs"),a=$(window),r=!0,l=function(){t.destroy(!0,!0)},u=function(){s.length&&t.on("slideChangeStart",function(n){var t=n.activeIndex;$(e.slides).removeClass("is-selected"),$(e.slides).eq(t).addClass("is-selected"),e.slideTo(t,500,!1)}),a.on({load:function(){r=a.width()>=1024},resize:function(){o.hasClass("gallery_2")||(a.width()>=1024?(r&&(l(),setTimeout(function(){f()},10)),r=!1):(r||(l(),setTimeout(function(){f()},10)),r=!0))}})},d=function(){o.hasClass("gallery_2")?t=new Swiper(s,{nextButton:c.find(".swiper-button-next"),prevButton:c.find(".swiper-button-prev"),spaceBetween:10}):f(),e=new Swiper(c.find(".swiper-container"),{spaceBetween:37,freeMode:!0,centeredSlides:!1,slidesPerView:"auto",touchRatio:.2,onClick:function(n){var e=n.clickedIndex;n.activeIndex=e,n.updateClasses(),$(n.slides).removeClass("is-selected"),$(n.clickedSlide).addClass("is-selected"),t.slideTo(e,500,!1)},onInit:function(){var n,t=c.find(".swiper-slide").length;t<10&&(t="0"+t),c.find(".gallery__thumbs-total-count").text(t),c.find(".swiper-slide").each(function(){n=$(this).index()+1,n<10?n="0"+n:0==n[0]&&(n=n.slice(1)),$(this).find(".gallery__thumbs-current-num").text(n)})}})},f=function(){t=a.width()>=1024?new Swiper(s,{nextButton:c.find(".swiper-button-next"),prevButton:c.find(".swiper-button-prev"),spaceBetween:10,effect:"fade",fade:{crossFade:!0}}):new Swiper(s,{nextButton:c.find(".swiper-button-next"),prevButton:c.find(".swiper-button-prev"),spaceBetween:10})},h=function(){o[0].obj=i,d(),u()};h()},o=function(n){var t,e=this,i=n,o=($(window),$("body"),function(){i.on({click:function(){return a(),!1}})}),s=function(){o(),c(),i[0].obj=e},c=function(){t=i.parent().nextAll(),t.css({display:"none"})},a=function(){t.css({display:"block"}),i.css({display:"none"})};s()},s=function(n){var t,e=this,i=n,o=i.find(".swiper-container"),s=$(".awards__text-wrap div"),c=function(){t.on("slideChangeStart",function(){s.addClass("hidden"),s.html("")}),t.on("slideChangeEnd",function(n){var t=n.activeIndex,e=n.slides.eq(t).find(".awards__text");s.removeClass("hidden"),s.html(e.html())})},a=function(){t=new Swiper(o,{pagination:o.find(".swiper-pagination"),paginationClickable:!0,nextButton:o.find(".swiper-button-next"),prevButton:o.find(".swiper-button-prev"),loop:!0,onInit:function(n){var t=n.activeIndex,e=n.slides.eq(t).find(".awards__text");s.html(e.html())}})},r=function(){i[0].obj=e,a(),c()};r()},c=function(n){var t=this,e=n,i=$(window),o=!0,s=function(){setTimeout(function(){e.niceScroll({cursorcolor:"#27282d",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0})},10)},c=function(){i.on({load:function(){o=i.width()>=1024,o&&s()},resize:function(){i.width()>=1024?(o&&s(),o=!1):(o||r(),o=!0)}})},a=function(){c(),e[0].obj=t},r=function(){e.getNiceScroll().remove(),e.css({"overflow-y":"auto"})};a()},a=function(n){var t=n,e=t.find(".about-portfolio__item"),o=$(".gallery-popup"),s=o.find(".gallery-popup__close"),c=o.find(".gallery-popup__wrap"),a=o.find(".gallery-popup__preloader"),r=$(window),l=$("html"),u=$("body"),d=!0,f=new XMLHttpRequest,h=function(){e.on({click:function(){var n=$(this);o.css({display:"block"}),r.width()<1024&&(l.css({"overflow-y":"hidden"}),u.css({"overflow-y":"hidden"})),_(n)}}),s.on({click:function(){return w(),!1}}),r.on({load:function(){d=r.width()>=1024},resize:function(){r.width()>=1024?(d&&p(),d=!1):(d||m(),d=!0)}})},p=function(){$(document).find(".gallery-popup__text").niceScroll({cursorcolor:"#fec303",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0}),setTimeout(function(){$(document).find(".gallery-popup__text").getNiceScroll().resize()},200)},w=function(){r.width()<1024&&(l.css({"overflow-y":"auto"}),u.css({"overflow-y":"auto"})),o.css({display:"none"}),a.css({display:"block"}),c.html("")},v=function(){h()},_=function(n){f.abort(),f=$.ajax({url:$("body").data("action"),data:{action:"get_gallery",id:n.attr("data-id")},dataType:"html",type:"get",success:function(n){c.html(n),setTimeout(function(){$(n).hasClass("gallery")&&$.each($(".gallery"),function(){new i($(this))}),r.width()>=1024&&p(),a.css({display:"none"})},500)},error:function(n){"abort"!=n.statusText&&alert("ERROR!!!")}})},m=function(){$(document).find(".gallery-popup__text").getNiceScroll().remove(),$(document).find(".gallery-popup__text").css({"overflow-y":"auto"})};v()},r=function(n){var t=this,e=n,i=(e.find(".swiper-container"),function(){new Swiper(e,{nextButton:e.find(".swiper-button-next"),prevButton:e.find(".swiper-button-prev"),loop:!0,spaceBetween:30})}),o=function(){e[0].obj=t,i()};o()},l=function(n){var t=n,e=t.find(".ajax-block__btn"),i=$(".ajax-block-"+t.attr("data-block")),o=$(".popup__preloader"),s=$(window),c=!0,a=new XMLHttpRequest,r=function(){e.on({click:function(){var n=$(this);n.hasClass("ajax-block__btn_loaded")||(e.removeClass("ajax-block__btn_loaded"),n.addClass("ajax-block__btn_loaded"),o.removeClass("hide"),i.html(""),i.css({display:"block"}),i.nextAll().css({display:"none"}),f(n))}}),s.on({load:function(){c=s.width()>=1024},resize:function(){s.width()>=1024?(c&&u(i.children()),c=!1):(c||h(i.children()),c=!0)}})},u=function(n){n.niceScroll({cursorcolor:"#27282d",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0}),setTimeout(function(){n.getNiceScroll().resize()},200)},d=function(){r()},f=function(n){a.abort(),a=$.ajax({url:$("body").attr("data-action"),data:{action:"get_areas",lvl:n.attr("data-lvl"),id:n.attr("data-id")},dataType:"html",type:"get",success:function(n){i.html(n),i.find(".ajax-block").length&&new l(i.find(".ajax-block")),i.find(".accordion").length&&$.each(i.find(".accordion_2 dl"),function(){new Accordion($(this))}),setTimeout(function(){s.width()>=1024&&u(i.children()),o.addClass("hide")},500)},error:function(n){"abort"!=n.statusText&&alert("ERROR!!!")}})},h=function(n){n.getNiceScroll().remove(),n.css({"overflow-y":"auto"})};d()},u=function(n){var t,e=this,i=n,o=i.find(".contact__sign-area"),s=i.find(".contact__sign-refresh"),c=$(".canvas_check"),a=$(window),r=function(){o.signature("destroy")},l=function(){s.on({click:function(){return o.signature("clear"),!1}}),a.on({resize:function(){r(),d()}}),c.on({click:function(){o.signature("isEmpty")?(o.addClass("contact__sign-area-red"),$(".sign_val").val("")):(t=o.signature("toSVG"),o.removeClass("contact__sign-area-red"),$(".sign_val").val(t))}})},u=function(){i[0].obj=e,l(),d()},d=function(){o.signature({thickness:1,color:"#ffffff"})};u()},d=function(n){var t=this,e=n,i=$(".careers_themes"),o=e.find(".apply"),s={},c=[],a=function(){o.on({click:function(){var n=$(this),t=n.data("value"),e=n.data("text1"),i=n.data("text2"),o=t;return n.hasClass("active")?(n.removeClass("active"),n.find("span").text(e),delete s[o]):(n.addClass("active"),n.find("span").text(i),s[o]=t),l(),!1}})},r=function(){e[0].obj=t,a()},l=function(){c=[];for(var n in s){var t=s[n];c.push(t)}i.val(c)};r()},f=function(n){var t=this,e=n,i=$(".nice-scroll"),o=$(window),s=function(){e.datepicker("hide"),e.blur()},c=function(){i.on({scroll:function(){s()}}),o.on({resize:function(){s()}})},a=function(){e[0].obj=t,r(),c()},r=function(){e.datepicker()};a()},h=function(n){var t=this,e=n,i=e.find("label"),o=function(){i.find("input:checkbox").off("click",function(){var n=$(this).attr("name");$(this).closest("form").find('input:checkbox[name="'+n+'"]').not(this).prop("checked",!1)}),i.click(function(n){return $(this).hasClass("active")?($(this).removeClass("active"),$(this).find("input").attr("checked",!1)):($(this).addClass("active"),$(this).find("input").attr("checked",!0)),n.stopPropagation(),n.cancelBubble=!0,!1})},s=function(){e[0].obj=t,o()};s()},p=function(n){var t=this,e=n,i=e.find("input[type=file]"),o=e.find("input[type=text]"),s=function(){i.on({change:function(){o.val($(this).val())}})},c=function(){e[0].obj=t,s()};c()},w=function(n){var t=this,e=n,i=$(".comments-customer"),o=$(".site__content__inner"),s=$(".site__form"),c=$("html, body"),a=$(window),r=function(){e.parents(".resources__item").length||e.on({click:function(){if(a.width()<1024){var n;n=i.length?i.offset().top:s.offset().top,c.stop(!0,!1),c.animate({scrollTop:n},300)}else{var n,t;i.length?(n=i.position().top,t=o.scrollTop()):(n=s.position().top,t=o.scrollTop()),o.stop(!0,!1),o.animate({scrollTop:n+t},300)}return!1}})},l=function(){e[0].obj=t,r(),u()},u=function(){if(!e.parents(".resources__item").length&&e.parents(".site__content__wrap").hasClass("comments_scroll"))if(a.width()<1024){var n;n=i.offset().top,c.scrollTop(n)}else{var n,t;n=i.position().top,t=o.scrollTop(),o.scrollTop(n+t)}};l()},v=function(n){var t=n,e=t.find(".resources__item"),i=t.find(".resources__items"),o=$(".resources__preloader"),s=(e.find(".resources__links-item_tags>a"),$(window),$("html"),$("body"),new XMLHttpRequest),c=function(){$(document).on("click",".resources__links-item_tags>a",function(){var n=$(this);return i.html(""),o.addClass("visible"),r(n),!1})},a=function(){c()},r=function(n){s.abort(),s=$.ajax({url:$("body").attr("data-action"),data:{action:"get_resources",tagId:n.attr("data-id")},dataType:"html",type:"get",success:function(n){i.html(n),setTimeout(function(){o.removeClass("visible")},500)},error:function(n){"abort"!=n.statusText&&alert("ERROR!!!")}})};a()}}();var Accordion=function(n){var t=this,e=n,i=e.find(">dt"),o=e.find(">dd"),s=$(window),c=$(".site__content__inner"),a=$("html, body"),r=0,l=0,u=!0,d=function(n,t){i.removeClass("similar"),n.removeClass("active"),n.css({"margin-bottom":""}),t.removeClass("visible")},f=function(){s.on({resize:function(){i.filter(".active").length&&v(i.filter(".active"),i.filter(".active").next())}}),i.on({click:function(){var n=$(this),t=n.next();return n.hasClass("active")?d(n,t):u&&h(n,t),!1}})},h=function(n,t){u=!1,i.removeClass("active"),i.css({"margin-bottom":""}),o.removeClass("visible similar"),n.addClass("active"),v(n,t),w(n),t.addClass("visible"),setTimeout(function(){u=!0},300)},p=function(){e[0].obj=t,f(),_()},w=function(n){s.width()<1024?(l=n.offset().top,a.stop(!0,!1),a.animate({scrollTop:l},300)):(l=e.position().top+n.outerHeight()*i.index(n)+c.scrollTop(),n.hasClass("similar")||(c.stop(!0,!1),c.animate({scrollTop:l},300)))},v=function(n,t){n.css({"margin-bottom":t.innerHeight()-1}),setTimeout(function(){var e=n.position().top,o=n.innerHeight();r=e+o,t.css({top:r}),i.each(function(){$(this).position().top==e?$(this).addClass("similar"):$(this).removeClass("similar")})},310)},_=function(){e.parent().hasClass("accordion_2")&&(2==i.length?i.addClass("half"):1==i.length&&i.addClass("full"))};p()};
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),1!=s||l||(p.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}})),$(".nice-scroll").on({scroll:function(){u&&v()}})},g=function(){!s||l?y():1==s&&_()},_=function(){p.addClass("websters-select_custom")},y=function(){p.addClass("websters-select_mobile")},m=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
!function(){$(function(){$(".popup").each(function(){new Popup($(this))})})}();var Popup=function(n){var o=this,p=$(".popup__open"),i=n,t=i.find(".popup__close, .popup__cancel"),e=i.find(".popup__wrap"),s=i.find(".popup__content"),c=$("html, body"),d=$(".site__content"),u=$(window),a=!0,f=setTimeout(function(){},1),l=function(){d.css({"z-index":4})},_=function(){d.css({"z-index":2})},r=function(){i.css({overflowY:"hidden"}),i.removeClass("popup_opened"),i.addClass("popup_hide"),f=setTimeout(function(){i.css({overflowY:"auto"}),i.removeClass("popup_hide")},300),u.width()<1024&&(c.css({overflowY:"auto",paddingRight:0}),_()),s.css({display:"none"}),i.find(".popup__addresses").length&&(i.find(".popup__addresses").children().css({display:"none"}),i.find(".popup__addresses").children().html(""),p.removeClass("ajax-block__btn_loaded"))},h=function(){i[0].obj=o,w()},w=function(){u.on({load:function(){a=u.width()>=1024},resize:function(){u.width()>=1024?a=!1:(a||r(),a=!0)}}),p.on({click:function(){return v($(this).attr("data-popup")),!1}}),e.on({click:function(n){n.stopPropagation()}}),i.on({click:function(){return r(),!1}}),t.on({click:function(){return r(),!1}})},v=function(n){m(n),i.addClass("popup_opened"),u.width()<1024&&(c.css({overflowY:"hidden"}),l())},m=function(n){var o=s.filter(".popup__"+n);o.css({display:"block"})};h()};
//# sourceMappingURL=data:application/json;base64,
