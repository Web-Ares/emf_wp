!function(){$(function(){"use strict";$.each($(".nice-scroll"),function(){new i($(this))}),$.each($(".site"),function(){new e($(this))}),$.each($(".site__content__wrap"),function(){new n($(this))}),$.each($(".site__header"),function(){new t($(this))}),$.each($(".menu"),function(){new i($(this))}),$.each($("body"),function(){new o($(this))}),$.each($(".gallery"),function(){new s($(this))}),$.each($(".site__read-more"),function(){new c($(this))}),$.each($(".accordion dl"),function(){new Accordion($(this))}),$.each($(".awards"),function(){new a($(this))}),$.each($(".popup-info"),function(){new r($(this))}),$.each($(".about-portfolio"),function(){new d($(this))}),$.each($(".services-areas__gallery"),function(){new l($(this))}),$.each($(".ajax-block"),function(){new u($(this))}),$(".contact__sign").length&&($(".contact__sign-area").signature({thickness:3,color:"#ffffff"}),$(".contact__sign-refresh").on({click:function(){return $(".contact__sign-area").signature("clear"),!1}}))});var e=function(e){var n=this,t=e,i=$(window),o=function(){var e=document.createElement("p");e.style.width="100%",e.style.height="200px";var n=document.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.visibility="hidden",n.style.width="200px",n.style.height="150px",n.style.overflow="hidden",n.appendChild(e),document.body.appendChild(n);var t=e.offsetWidth;n.style.overflow="scroll";var i=e.offsetWidth;return t==i&&(i=n.clientWidth),document.body.removeChild(n),t-i},s=function(){i.on({resize:function(){i.width()>=1024-o()&&a()}})},c=function(){s(),i.width()>=1024-o()&&a(),t[0].obj=n},a=function(){i.height()>=500?t.css({"min-height":"100%"}):t.css({"min-height":"500px"})};c()},n=function(e){var n=this,t=e,i=$(window),o=$(".site__content > .site__title"),s=function(){var e=document.createElement("p");e.style.width="100%",e.style.height="200px";var n=document.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.visibility="hidden",n.style.width="200px",n.style.height="150px",n.style.overflow="hidden",n.appendChild(e),document.body.appendChild(n);var t=e.offsetWidth;n.style.overflow="scroll";var i=e.offsetWidth;return t==i&&(i=n.clientWidth),document.body.removeChild(n),t-i},c=function(){i.on({resize:function(){i.width()>=1024-s()?r():d()},load:function(){i.width()>=1024-s()&&r()}})},a=function(){c(),t[0].obj=n},r=function(){var e=o.offset().top+o.outerHeight(!0);t.css({top:e})},d=function(){t.css({top:"auto"})};a()},t=function(e){var n=this,t=e,i=$(window),o=t.find(".site__header__btn"),s=t.find(".site__header__items"),c=$("html"),a=$("body"),r=function(){t.removeClass("opened"),c.css({"overflow-y":"auto"}),a.css({"overflow-y":"auto"}),s.attr("style","")},d=function(){i.on({resize:function(){t.hasClass("opened")&&r()}}),o.on({click:function(){return t.hasClass("opened")?r():l(),!1}})},l=function(){t.addClass("opened"),c.css({"overflow-y":"hidden"}),a.css({"overflow-y":"hidden"}),f()},u=function(){d(),t[0].obj=n},f=function(){s.height(i.height()-s.offset().top)};u()},i=function(e){var n=this,t=e,i=$(window),o=function(){setTimeout(function(){t.niceScroll({cursorcolor:"#fec303",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0})},10),setTimeout(function(){t.getNiceScroll().resize()},350)},s=function(){i.on({load:function(){i.width()>=1024&&o()}})},c=function(){s(),t[0].obj=n};c()},o=function(e){var n=this,t=e,i=$(window),o=$("body"),s=function(){i.on({resize:function(){a()}})},c=function(){s(),a(),t[0].obj=n},a=function(){var e;e=i.height()>500?100*(window.innerHeight/900)+"px":100*(500/900)+"px",o.css({"font-size":e})};c()},s=function(e){var n=this,t=e,i=e.find(".gallery__top"),o=e.find(".gallery__thumbs"),s=function(){var e=new Swiper(i,{nextButton:o.find(".swiper-button-next"),prevButton:o.find(".swiper-button-prev"),spaceBetween:10,effect:"fade",fade:{crossFade:!0},onSlideChangeStart:function(e){var t=e.activeIndex;$(n.slides).removeClass("is-selected"),$(n.slides).eq(t).addClass("is-selected"),n.slideTo(t,500,!1)}}),n=new Swiper(o.find(".swiper-container"),{spaceBetween:37,freeMode:!0,centeredSlides:!1,slidesPerView:"auto",touchRatio:.2,onClick:function(n){var t=n.clickedIndex;n.activeIndex=t,n.updateClasses(),$(n.slides).removeClass("is-selected"),$(n.clickedSlide).addClass("is-selected"),e.slideTo(t,500,!1)},onInit:function(){var e,n=o.find(".swiper-slide").length;n<10&&(n="0"+n),o.find(".gallery__thumbs-total-count").text(n),o.find(".swiper-slide").each(function(){e=$(this).index()+1,e<10?e="0"+e:0==e[0]&&(e=e.slice(1)),$(this).find(".gallery__thumbs-current-num").text(e)})}})},c=function(){t[0].obj=n,s()};c()},c=function(e){var n,t=this,i=e,o=($(window),$("body"),function(){i.on({click:function(){return a(),!1}})}),s=function(){o(),c(),i[0].obj=t},c=function(){n=i.parent().nextAll(),n.css({display:"none"})},a=function(){n.css({display:"block"}),i.css({display:"none"})};s()},a=function(e){var n=this,t=e,i=t.find(".swiper-container"),o=function(){new Swiper(i,{pagination:i.find(".swiper-pagination"),paginationClickable:!0,nextButton:i.find(".swiper-button-next"),prevButton:i.find(".swiper-button-prev"),effect:"fade",fade:{crossFade:!0},loop:!0,spaceBetween:30})},s=function(){t[0].obj=n,o()};s()},r=function(e){var n=this,t=e,i=$(window),o=function(){setTimeout(function(){t.niceScroll({cursorcolor:"#27282d",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0})},10),setTimeout(function(){t.getNiceScroll().resize()},350)},s=function(){i.on({load:function(){i.width()>=1024&&o()}})},c=function(){s(),t[0].obj=n};c()},d=function(e){var n=e,t=n.find(".about-portfolio__item"),i=$(".gallery-popup"),o=i.find(".gallery-popup__close"),c=i.find(".gallery-popup__wrap"),a=i.find(".gallery-popup__preloader"),r=$(window),d=$("html"),l=$("body"),u=new XMLHttpRequest,f=function(){t.on({click:function(){var e=$(this);i.css({display:"block"}),r.width()<1024&&(d.css({"overflow-y":"hidden"}),l.css({"overflow-y":"hidden"})),b(e)}}),o.on({click:function(){return p(),!1}})},h=function(){$(document).find(".gallery-popup__text").niceScroll({cursorcolor:"#fec303",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0}),setTimeout(function(){$(document).find(".gallery-popup__text").getNiceScroll().resize()},200)},p=function(){r.width()<1024&&(d.css({"overflow-y":"auto"}),l.css({"overflow-y":"auto"})),i.css({display:"none"}),a.css({display:"block"}),c.html("")},w=function(){f()},b=function(e){u.abort(),u=$.ajax({url:$("body").data("action"),data:{action:"get_gallery",id:e.attr("data-id")},dataType:"json",type:"get",success:function(e){c.html(e.html),setTimeout(function(){$(e.html).hasClass("gallery")&&$.each($(".gallery"),function(){new s($(this))}),r.width()>=1024&&h(),a.css({display:"none"})},500)},error:function(e){"abort"!=e.statusText&&alert("ERROR!!!")}})};w()},l=function(e){var n=this,t=e,i=(t.find(".swiper-container"),function(){new Swiper(t,{nextButton:t.find(".swiper-button-next"),prevButton:t.find(".swiper-button-prev"),spaceBetween:30})}),o=function(){t[0].obj=n,i()};o()},u=function(e){var n=e,t=n.find(".ajax-block__btn"),i=$(".ajax-block-"+n.attr("data-block")),o=$(".popup__preloader"),s=$(window),c=($("html"),$("body"),new XMLHttpRequest),a=function(){t.on({click:function(){var e=$(this);e.hasClass("ajax-block__btn_loaded")||(t.removeClass("ajax-block__btn_loaded"),e.addClass("ajax-block__btn_loaded"),o.removeClass("hide"),i.html(""),i.css({display:"block"}),i.nextAll().css({display:"none"}),l(e))}})},r=function(e){e.niceScroll({cursorcolor:"#27282d",cursoropacitymin:"0",cursorborderradius:"2px",cursorborder:"none",background:"#3d3e42",cursorwidth:"5px",autohidemode:"leave",enablemousewheel:!0}),setTimeout(function(){e.getNiceScroll().resize()},200)},d=function(){a()},l=function(e){c.abort(),c=$.ajax({url:$("body").attr("data-action"),data:{action:"get_areas",lvl:e.attr("data-lvl"),id:e.attr("data-id")},dataType:"json",type:"get",success:function(e){i.html(e.html),i.find(".ajax-block").length&&new u(i.find(".ajax-block")),i.find(".accordion").length&&$.each(i.find(".accordion_2 dl"),function(){new Accordion($(this))}),setTimeout(function(){s.width()>=1024&&r(i.children()),o.addClass("hide")},500)},error:function(e){"abort"!=e.statusText&&alert("ERROR!!!")}})};d()}}();var Accordion=function(e){var n=this,t=e,i=t,o=i.css("min-height"),s=t.find(">dt"),c=t.find(">dd"),a=$(window),r=s.innerHeight()+s.position().top,d=function(){a.on({load:function(){r=s.innerHeight()+s.position().top},resize:function(){r=s.innerHeight()+s.position().top,i.css({"min-height":r+c.filter(".visible").innerHeight()})}}),s.on({click:function(){var e=$(this),n=e.next();return e.hasClass("active")?(e.removeClass("active"),n.css({display:"none"}),setTimeout(function(){n.removeClass("visible")},300),i.css({"min-height":parseInt(o)/16+"em"})):(s.removeClass("active"),c.css({display:"none"}),setTimeout(function(){c.removeClass("visible")},300),e.addClass("active"),n.css({display:"block"}),setTimeout(function(){n.addClass("visible"),t.parent().hasClass("accordion_2")&&u(n)},300),i.css({"min-height":r+n.innerHeight()})),!1}})},l=function(){t[0].obj=n,d()},u=function(e){e.css({top:r})};l()};
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),1!=s||l||(p.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}})),$(".nice-scroll").on({scroll:function(){u&&v()}})},g=function(){!s||l?y():1==s&&_()},_=function(){p.addClass("websters-select_custom")},y=function(){p.addClass("websters-select_mobile")},m=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.niceScroll({horizrailenabled:!1})),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
!function(){$(function(){$(".popup").each(function(){new Popup($(this))})})}();var Popup=function(n){var o=this,p=$(".popup__open"),i=n,e=i.find(".popup__close, .popup__cancel"),s=i.find(".popup__wrap"),t=i.find(".popup__content"),c=$("html, body"),u=$(".site__content"),d=$(window),a=setTimeout(function(){},1),f=function(){u.css({"z-index":4})},l=function(){u.css({"z-index":2})},_=function(){i.css({overflowY:"hidden"}),i.removeClass("popup_opened"),i.addClass("popup_hide"),a=setTimeout(function(){i.css({overflowY:"auto"}),i.removeClass("popup_hide")},300),d.width()<1024&&(c.css({overflowY:"auto",paddingRight:0}),l()),t.css({display:"none"}),i.find(".popup__addresses").length&&(i.find(".popup__addresses").children().css({display:"none"}),i.find(".popup__addresses").children().html(""),p.removeClass("ajax-block__btn_loaded"))},r=function(){i[0].obj=o,h()},h=function(){d.on({resize:function(){d.width()<1024&&_()}}),p.on({click:function(){return w($(this).attr("data-popup")),!1}}),s.on({click:function(n){n.stopPropagation()}}),i.on({click:function(){return _(),!1}}),e.on({click:function(){return _(),!1}})},w=function(n){v(n),i.addClass("popup_opened"),d.width()<1024&&(c.css({overflowY:"hidden"}),f())},v=function(n){var o=t.filter(".popup__"+n);o.css({display:"block"})};r()};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LndlYnN0ZXJzLXNlbGVjdC5qcyIsImpxdWVyeS5wb3B1cC5qcyJdLCJuYW1lcyI6WyIkIiwiZWFjaCIsIk5pY2VTY3JvbGwiLCJ0aGlzIiwiRnVsbEhlaWdodFNpdGUiLCJGdWxsSGVpZ2h0U2l0ZUlubmVyIiwiTWVudSIsIlpvb21TaXRlIiwiR2FsbGVyeSIsIlJlYWRNb3JlIiwiQWNjb3JkaW9uIiwiQXdhcmRzR2FsbGVyeSIsIlNpdGVDb250ZW50UG9wdXBOaWNlU2Nyb2xsIiwiQWJvdXRQb3J0Zm9saW9Qb3B1cCIsIlNlcnZpY2VzQXJlYUdhbGxlcnkiLCJBamF4UmVxdWVzdFBvcHVwIiwibGVuZ3RoIiwic2lnbmF0dXJlIiwidGhpY2tuZXNzIiwiY29sb3IiLCJvbiIsImNsaWNrIiwib2JqIiwiX3NlbGYiLCJfb2JqIiwiX3dpbmRvdyIsIndpbmRvdyIsIl9nZXRTY3JvbGxCYXJXaWR0aCIsImlubmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJ3aWR0aCIsImhlaWdodCIsIm91dGVyIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwidmlzaWJpbGl0eSIsIm92ZXJmbG93IiwiYXBwZW5kQ2hpbGQiLCJib2R5IiwidzEiLCJvZmZzZXRXaWR0aCIsIncyIiwiY2xpZW50V2lkdGgiLCJyZW1vdmVDaGlsZCIsIl9vbkV2ZW50cyIsInJlc2l6ZSIsIl9zZXRIZWlnaHQiLCJfaW5pdCIsImNzcyIsIm1pbi1oZWlnaHQiLCJfdGl0bGUiLCJfc2V0UG9zVG9wIiwiX3Jlc2V0UG9zVG9wIiwibG9hZCIsImJsYSIsIm9mZnNldCIsIm91dGVySGVpZ2h0IiwiX21lbnVCdG4iLCJmaW5kIiwiX21lbnVJdGVtcyIsIl9odG1sIiwiX2JvZHkiLCJfY2xvc2VNZW51IiwicmVtb3ZlQ2xhc3MiLCJvdmVyZmxvdy15IiwiYXR0ciIsImhhc0NsYXNzIiwiX29wZW5NZW51IiwiYWRkQ2xhc3MiLCJfYWRkU2Nyb2xsIiwic2V0VGltZW91dCIsIm5pY2VTY3JvbGwiLCJjdXJzb3Jjb2xvciIsImN1cnNvcm9wYWNpdHltaW4iLCJjdXJzb3Jib3JkZXJyYWRpdXMiLCJjdXJzb3Jib3JkZXIiLCJiYWNrZ3JvdW5kIiwiY3Vyc29yd2lkdGgiLCJhdXRvaGlkZW1vZGUiLCJlbmFibGVtb3VzZXdoZWVsIiwiZ2V0TmljZVNjcm9sbCIsIl9zZXRTaXplIiwibmV3U2l6ZSIsImlubmVySGVpZ2h0IiwiZm9udC1zaXplIiwiX2dhbGxlcnlUb3AiLCJfZ2FsbGVyeVRodW1icyIsIl9pbml0U3dpcGVyIiwiZ2FsbGVyeVRvcCIsIlN3aXBlciIsIm5leHRCdXR0b24iLCJwcmV2QnV0dG9uIiwic3BhY2VCZXR3ZWVuIiwiZWZmZWN0IiwiZmFkZSIsImNyb3NzRmFkZSIsIm9uU2xpZGVDaGFuZ2VTdGFydCIsInN3aXBlciIsImFjdGl2ZUluZGV4IiwiZ2FsbGVyeVRodW1icyIsInNsaWRlcyIsImVxIiwic2xpZGVUbyIsImZyZWVNb2RlIiwiY2VudGVyZWRTbGlkZXMiLCJzbGlkZXNQZXJWaWV3IiwidG91Y2hSYXRpbyIsIm9uQ2xpY2siLCJjbGlja2VkIiwiY2xpY2tlZEluZGV4IiwidXBkYXRlQ2xhc3NlcyIsImNsaWNrZWRTbGlkZSIsIm9uSW5pdCIsImN1cnJlbnROdW0iLCJ0b3RhbENvdW50IiwidGV4dCIsImluZGV4Iiwic2xpY2UiLCJfaXRlbXMiLCJfZGlzcGxheUl0ZW1zIiwiX2Rpc2FwcGVhckl0ZW1zIiwicGFyZW50IiwibmV4dEFsbCIsImRpc3BsYXkiLCJfYXdhcmRzR2FsbGVyeSIsInBhZ2luYXRpb24iLCJwYWdpbmF0aW9uQ2xpY2thYmxlIiwibG9vcCIsIl9wb3B1cEdhbGxlcnkiLCJfcG9wdXBHYWxsZXJ5Q2xvc2UiLCJfcG9wdXBHYWxsZXJ5V3JhcCIsIl9wb3B1cEdhbGxlcnlMb2FkIiwiX3JlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIl9hZGRFdmVudHMiLCJjdXJJdGVtIiwiX3JlcXVlc3RDb250ZW50IiwiX2Nsb3NlUG9wdXAiLCJodG1sIiwiZWxlbSIsImFib3J0IiwiYWpheCIsInVybCIsImRhdGEiLCJhY3Rpb24iLCJpZCIsImRhdGFUeXBlIiwidHlwZSIsInN1Y2Nlc3MiLCJtIiwiZXJyb3IiLCJzdGF0dXNUZXh0IiwiYWxlcnQiLCJfbG9hZEJsb2NrIiwiX3BvcHVwTG9hZCIsImx2bCIsImNoaWxkcmVuIiwiX2FjY29yZGlvbkxpc3QiLCJfYWNjb3JkaW9uTGlzdE1pbkhlaWdodCIsIl9hY2NvcmRpb25DYXB0aW9uIiwiX2FjY29yZGlvbkNvbnRlbnQiLCJfaGVpZ2h0TGlzdCIsImZpbHRlciIsIm5leHRFbGVtIiwibmV4dCIsInBhcnNlSW50IiwiX3NldFBvc0l0ZW1zIiwiV2Vic3RlcnNTZWxlY3QiLCJvcHRpb25UeXBlIiwic2hvd1R5cGUiLCJwYXJhbXMiLCJfcG9wdXAiLCJfc2Nyb2xsIiwiX29wdGlvblR5cGUiLCJfc2hvd1R5cGUiLCJfdmlzaWJsZSIsInZpc2libGUiLCJfZGV2aWNlIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIl90ZXh0IiwiX3dyYXAiLCJfb3BlbmVkIiwiX2FkZFdyYXAiLCJjdXJUZXh0Iiwib3BhY2l0eSIsIndyYXAiLCJhcHBlbmQiLCJiZWZvcmUiLCJfaGlkZVBvcHVwIiwic3RvcCIsInNsaWRlVXAiLCJyZW1vdmUiLCJmYWRlT3V0IiwiX2NvbnN0cnVjdG9yIiwiX3NlbGVjdFZpZXdUeXBlIiwiZSIsInN0b3BQcm9wYWdhdGlvbiIsIl9zaG93UG9wdXAiLCJzY3JvbGwiLCJfc2V0TW9iaWxlVmlldyIsIl9zZXRDdXN0b20xIiwic2VsZWN0cyIsImxpc3QiLCJzY3JvbGxUb3AiLCJtYXhIZWlnaHQiLCJjdXJJbmRleCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImNoZWNrT3BlbmVkIiwiY2xvc2UiLCJpIiwib3V0ZXJXaWR0aCIsImhvcml6cmFpbGVuYWJsZWQiLCJzbGlkZURvd24iLCJhbmltYXRlIiwidmFsIiwidHJpZ2dlciIsIlBvcHVwIiwiX2J0blNob3ciLCJfYnRuQ2xvc2UiLCJfY29udGVudHMiLCJfZG9tIiwiX2NvbnRlbnQiLCJfdGltZXIiLCJfY2hhbmdlQ29udGVudFppbmRleCIsInotaW5kZXgiLCJfcmVzZXRDb250ZW50WmluZGV4IiwiX2hpZGUiLCJvdmVyZmxvd1kiLCJwYWRkaW5nUmlnaHQiLCJfc2hvdyIsImNsYXNzTmFtZSIsIl9zZXRQb3B1cENvbnRlbnQiLCJjdXJDb250ZW50Il0sIm1hcHBpbmdzIjoiQ0FBQSxXQUVJQSxFQUFHLFdBQ0MsWUFFQUEsR0FBRUMsS0FBTUQsRUFBRSxnQkFBaUIsV0FFdkIsR0FBSUUsR0FBWUYsRUFBRUcsU0FJdEJILEVBQUVDLEtBQU1ELEVBQUUsU0FBVSxXQUVoQixHQUFJSSxHQUFnQkosRUFBRUcsU0FJMUJILEVBQUVDLEtBQU1ELEVBQUUsd0JBQXlCLFdBRS9CLEdBQUlLLEdBQXFCTCxFQUFFRyxTQUkvQkgsRUFBRUMsS0FBTUQsRUFBRSxpQkFBa0IsV0FFeEIsR0FBSU0sR0FBTU4sRUFBRUcsU0FJaEJILEVBQUVDLEtBQU1ELEVBQUUsU0FBVSxXQUVoQixHQUFJRSxHQUFZRixFQUFFRyxTQUl0QkgsRUFBRUMsS0FBTUQsRUFBRSxRQUFTLFdBRWYsR0FBSU8sR0FBVVAsRUFBRUcsU0FJcEJILEVBQUVDLEtBQU1ELEVBQUcsWUFBYyxXQUNyQixHQUFJUSxHQUFTUixFQUFFRyxTQUduQkgsRUFBRUMsS0FBTUQsRUFBRyxvQkFBc0IsV0FDN0IsR0FBSVMsR0FBVVQsRUFBRUcsU0FHcEJILEVBQUVDLEtBQU1ELEVBQUcsaUJBQW1CLFdBQzFCLEdBQUlVLFdBQVdWLEVBQUVHLFNBR3JCSCxFQUFFQyxLQUFNRCxFQUFHLFdBQWEsV0FDcEIsR0FBSVcsR0FBZVgsRUFBRUcsU0FHekJILEVBQUVDLEtBQU1ELEVBQUUsZUFBZ0IsV0FFdEIsR0FBSVksR0FBNEJaLEVBQUVHLFNBSXRDSCxFQUFFQyxLQUFNRCxFQUFFLG9CQUFxQixXQUUzQixHQUFJYSxHQUFxQmIsRUFBRUcsU0FJL0JILEVB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LFdBQVksV0FFakJqRCxFQUFLMkIsS0FDRHVMLFVBQVcsU0FHZmxOLEVBQUswQyxZQUFhLGVBRW5CLEtBRUN6QyxFQUFRTyxRQUFVLE9BRWxCbU0sRUFBS2hMLEtBQ0R1TCxVQUFXLE9BQ1hDLGFBQWMsSUFHbEJILEtBR0pOLEVBQVUvSyxLQUFPMkUsUUFBUyxTQUV0QnRHLEVBQUtxQyxLQUFLLHFCQUFxQjdDLFNBRS9CUSxFQUFLcUMsS0FBSyxxQkFBcUJrRyxXQUFXNUcsS0FBTzJFLFFBQVMsU0FDMUR0RyxFQUFLcUMsS0FBSyxxQkFBcUJrRyxXQUFXbEIsS0FBSyxJQUMvQ21GLEVBQVM5SixZQUFZLDRCQUs3QmhCLEVBQVEsV0FDSjFCLEVBQU0sR0FBSUYsSUFBTUMsRUFDaEJ3QixLQUVKQSxFQUFZLFdBQ1J0QixFQUFRTCxJQUNKNEIsT0FBUSxXQUVBdkIsRUFBUU8sUUFBVSxNQUNsQnlNLE9BUVpULEVBQVM1TSxJQUNMQyxNQUFPLFdBR0gsTUFGQXVOLEdBQU81TyxFQUFHRyxNQUFPaUUsS0FBTSxnQkFFaEIsS0FJZnFILEVBQU1ySyxJQUNGQyxNQUFPLFNBQVVtTCxHQUNiQSxFQUFFQyxxQkFHVmpMLEVBQUtKLElBQ0RDLE1BQU8sV0FFSCxNQURBb04sTUFDTyxLQUdmUixFQUFVN00sSUFDTkMsTUFBTyxXQUVILE1BREFvTixNQUNPLE1BSW5CRyxFQUFRLFNBQVVDLEdBQ2RDLEVBQWtCRCxHQUVsQnJOLEVBQUsrQyxTQUFVLGdCQUVYOUMsRUFBUU8sUUFBVSxPQUVsQm1NLEVBQUtoTCxLQUNEdUwsVUFBVyxXQUdmSixNQUlSUSxFQUFtQixTQUFVRCxHQUN6QixHQUFJRSxHQUFhYixFQUFVN0QsT0FBUSxXQUFhd0UsRUFHaERFLEdBQVc1TCxLQUFPMkUsUUFBUyxVQVFuQzVFIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKCBmdW5jdGlvbigpe1xuXG4gICAgJCggZnVuY3Rpb24oKSB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcblxuICAgICAgICAkLmVhY2goICQoJy5uaWNlLXNjcm9sbCcpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBOaWNlU2Nyb2xsKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLnNpdGUnKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgRnVsbEhlaWdodFNpdGUoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcuc2l0ZV9fY29udGVudF9fd3JhcCcpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBGdWxsSGVpZ2h0U2l0ZUlubmVyKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLnNpdGVfX2hlYWRlcicpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBNZW51KCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLm1lbnUnKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgTmljZVNjcm9sbCggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJ2JvZHknKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgWm9vbVNpdGUoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLmdhbGxlcnknICksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ldyBHYWxsZXJ5KCAkKHRoaXMpICk7XG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoICcuc2l0ZV9fcmVhZC1tb3JlJyApLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBuZXcgUmVhZE1vcmUoICQodGhpcykgKTtcbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5hY2NvcmRpb24gZGwnICksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ldyBBY2NvcmRpb24oICQodGhpcykgKTtcbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5hd2FyZHMnICksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ldyBBd2FyZHNHYWxsZXJ5KCAkKHRoaXMpICk7XG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJy5wb3B1cC1pbmZvJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IFNpdGVDb250ZW50UG9wdXBOaWNlU2Nyb2xsKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLmFib3V0LXBvcnRmb2xpbycpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBBYm91dFBvcnRmb2xpb1BvcHVwKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5zZXJ2aWNlcy1hcmVhc19fZ2FsbGVyeScgKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbmV3IFNlcnZpY2VzQXJlYUdhbGxlcnkoICQodGhpcykgKTtcbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLmFqYXgtYmxvY2snKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgQWpheFJlcXVlc3RQb3B1cCggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICBpZiggJCgnLmNvbnRhY3RfX3NpZ24nKS5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgICQoJy5jb250YWN0X19zaWduLWFyZWEnKS5zaWduYXR1cmUoIHtcbiAgICAgICAgICAgICAgICB0aGlja25lc3M6IDMsXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjZmZmZmZmJ1xuICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAkKCcuY29udGFjdF9fc2lnbi1yZWZyZXNoJykub24oIHtcbiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJy5jb250YWN0X19zaWduLWFyZWEnKS5zaWduYXR1cmUoJ2NsZWFyJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgfVxuXG5cbiAgICB9ICk7XG5cbiAgICB2YXIgRnVsbEhlaWdodFNpdGUgPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfZ2V0U2Nyb2xsQmFyV2lkdGggPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICAgICAgaW5uZXIuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgICAgICAgICBpbm5lci5zdHlsZS5oZWlnaHQgPSBcIjIwMHB4XCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgb3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBvdXRlci5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgICAgICBvdXRlci5zdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgICAgICAgICAgIG91dGVyLnN0eWxlLmxlZnQgPSBcIjBweFwiO1xuICAgICAgICAgICAgICAgIG91dGVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgICAgIG91dGVyLnN0eWxlLndpZHRoID0gXCIyMDBweFwiO1xuICAgICAgICAgICAgICAgIG91dGVyLnN0eWxlLmhlaWdodCA9IFwiMTUwcHhcIjtcbiAgICAgICAgICAgICAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICAgICAgb3V0ZXIuYXBwZW5kQ2hpbGQgKGlubmVyKTtcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgKG91dGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgdzEgPSBpbm5lci5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuICAgICAgICAgICAgICAgIHZhciB3MiA9IGlubmVyLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgIGlmICh3MSA9PSB3MikgdzIgPSBvdXRlci5jbGllbnRXaWR0aDtcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQgKG91dGVyKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAodzEgLSB3Mik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgLSBfZ2V0U2Nyb2xsQmFyV2lkdGgoKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG5cbiAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgLSBfZ2V0U2Nyb2xsQmFyV2lkdGgoKSApIHtcbiAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LmhlaWdodCgpID49IDUwMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6ICcxMDAlJ1xuXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5jc3MoIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiAnNTAwcHgnXG5cbiAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBGdWxsSGVpZ2h0U2l0ZUlubmVyID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgICAgIF90aXRsZSA9ICQoJy5zaXRlX19jb250ZW50ID4gLnNpdGVfX3RpdGxlJyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9nZXRTY3JvbGxCYXJXaWR0aCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdmFyIGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaW5uZXIuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgICAgIGlubmVyLnN0eWxlLmhlaWdodCA9IFwiMjAwcHhcIjtcblxuICAgICAgICAgICAgdmFyIG91dGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBvdXRlci5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgIG91dGVyLnN0eWxlLnRvcCA9IFwiMHB4XCI7XG4gICAgICAgICAgICBvdXRlci5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgICAgICAgIG91dGVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgb3V0ZXIuc3R5bGUud2lkdGggPSBcIjIwMHB4XCI7XG4gICAgICAgICAgICBvdXRlci5zdHlsZS5oZWlnaHQgPSBcIjE1MHB4XCI7XG4gICAgICAgICAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICBvdXRlci5hcHBlbmRDaGlsZCAoaW5uZXIpO1xuXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIChvdXRlcik7XG4gICAgICAgICAgICB2YXIgdzEgPSBpbm5lci5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIG91dGVyLnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gICAgICAgICAgICB2YXIgdzIgPSBpbm5lci5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIGlmICh3MSA9PSB3MikgdzIgPSBvdXRlci5jbGllbnRXaWR0aDtcblxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCAob3V0ZXIpO1xuXG4gICAgICAgICAgICByZXR1cm4gKHcxIC0gdzIpO1xuICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgLSBfZ2V0U2Nyb2xsQmFyV2lkdGgoKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRQb3NUb3AoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXNldFBvc1RvcCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgLSBfZ2V0U2Nyb2xsQmFyV2lkdGgoKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0UG9zVG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldFBvc1RvcCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIHZhciBibGEgPSBfdGl0bGUub2Zmc2V0KCkudG9wICsgX3RpdGxlLm91dGVySGVpZ2h0KCB0cnVlICk7XG5cbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xuXG4gICAgICAgICAgICAgICAgICAgICd0b3AnOiBibGFcblxuICAgICAgICAgICAgICAgIH0gKTtcblxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3Jlc2V0UG9zVG9wID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcblxuICAgICAgICAgICAgICAgICAgICAndG9wJzogJ2F1dG8nXG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgTWVudSA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cpLFxuICAgICAgICAgICAgX21lbnVCdG4gPSBfb2JqLmZpbmQoJy5zaXRlX19oZWFkZXJfX2J0bicpLFxuICAgICAgICAgICAgX21lbnVJdGVtcyA9IF9vYmouZmluZCgnLnNpdGVfX2hlYWRlcl9faXRlbXMnKSxcbiAgICAgICAgICAgIF9odG1sID0gJCgnaHRtbCcpLFxuICAgICAgICAgICAgX2JvZHkgPSAkKCdib2R5Jyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyICBfY2xvc2VNZW51ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgIF9odG1sLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICdhdXRvJ1xuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfYm9keS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93LXknOiAnYXV0bydcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgX21lbnVJdGVtcy5hdHRyKCAnc3R5bGUnLCAnJyApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX29iai5oYXNDbGFzcyggJ29wZW5lZCcgKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZU1lbnUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9tZW51QnRuLm9uKCB7XG5cbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vYmouaGFzQ2xhc3MoICdvcGVuZWQnICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VNZW51KCk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuTWVudSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb3Blbk1lbnUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdvcGVuZWQnICk7XG4gICAgICAgICAgICAgICAgX2h0bWwuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgX2JvZHkuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX21lbnVJdGVtcy5oZWlnaHQoIF93aW5kb3cuaGVpZ2h0KCkgLSBfbWVudUl0ZW1zLm9mZnNldCgpLnRvcCApO1xuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBOaWNlU2Nyb2xsID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLm5pY2VTY3JvbGwoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcmNvbG9yOlwiI2ZlYzMwM1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yb3BhY2l0eW1pbjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3Jib3JkZXJyYWRpdXM6IFwiMnB4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3Jib3JkZXI6IFwibm9uZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogXCIjM2QzZTQyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3J3aWR0aDogXCI1cHhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9oaWRlbW9kZTogJ2xlYXZlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZW1vdXNld2hlZWw6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgfSwgMTAgKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfb2JqLmdldE5pY2VTY3JvbGwoKS5yZXNpemUoKTtcblxuICAgICAgICAgICAgfSwgMzUwICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG5cbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24gKCkge1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0xMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkZFNjcm9sbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuXG4gICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFpvb21TaXRlID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyksXG4gICAgICAgICAgICBfYm9keSA9ICQoICdib2R5JyApO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhclxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2V0U2l6ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgX3NldFNpemUoKTtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldFNpemUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3U2l6ZTtcblxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LmhlaWdodCgpID4gNTAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSAoIDEwMCAqICggd2luZG93LmlubmVySGVpZ2h0IC8gOTAwICkgKSArICdweCc7XG5cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3U2l6ZSA9ICggMTAwICogKCA1MDAgLyA5MDAgKSApICsgJ3B4JztcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9ib2R5LmNzcygge1xuICAgICAgICAgICAgICAgICAgICAnZm9udC1zaXplJzogbmV3U2l6ZVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBHYWxsZXJ5ID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2dhbGxlcnlUb3AgPSBvYmouZmluZCgnLmdhbGxlcnlfX3RvcCcpLFxuICAgICAgICAgICAgX2dhbGxlcnlUaHVtYnMgPSBvYmouZmluZCgnLmdhbGxlcnlfX3RodW1icycpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5uaWNlU2Nyb2xsKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3Jjb2xvcjpcIiMyNzI4MmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcm9wYWNpdHltaW46IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yYm9yZGVycmFkaXVzOiBcIjJweFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yYm9yZGVyOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IFwiIzNkM2U0MlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yd2lkdGg6IFwiNXB4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvaGlkZW1vZGU6ICdsZWF2ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVtb3VzZXdoZWVsOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIH0sIDEwICk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLmdldE5pY2VTY3JvbGwoKS5yZXNpemUoKTtcblxuICAgICAgICAgICAgICAgIH0sIDM1MCApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXRTd2lwZXIgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgdmFyIGdhbGxlcnlUb3AgPSBuZXcgU3dpcGVyKCBfZ2FsbGVyeVRvcCwge1xuICAgICAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiBfZ2FsbGVyeVRodW1icy5maW5kKCAnLnN3aXBlci1idXR0b24tbmV4dCcgKSxcbiAgICAgICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogIF9nYWxsZXJ5VGh1bWJzLmZpbmQoICcuc3dpcGVyLWJ1dHRvbi1wcmV2JyApLFxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDEwLFxuICAgICAgICAgICAgICAgICAgICBlZmZlY3Q6ICdmYWRlJyxcbiAgICAgICAgICAgICAgICAgICAgZmFkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NGYWRlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uU2xpZGVDaGFuZ2VTdGFydDogZnVuY3Rpb24oIHN3aXBlciApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgJCggZ2FsbGVyeVRodW1icy5zbGlkZXMgKS5yZW1vdmVDbGFzcyggJ2lzLXNlbGVjdGVkJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCggZ2FsbGVyeVRodW1icy5zbGlkZXMgKS5lcSggYWN0aXZlSW5kZXggKS5hZGRDbGFzcyggJ2lzLXNlbGVjdGVkJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeVRodW1icy5zbGlkZVRvKCBhY3RpdmVJbmRleCwgNTAwLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgZ2FsbGVyeVRodW1icyA9IG5ldyBTd2lwZXIoIF9nYWxsZXJ5VGh1bWJzLmZpbmQoICcuc3dpcGVyLWNvbnRhaW5lcicgKSwge1xuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDM3LFxuICAgICAgICAgICAgICAgICAgICBmcmVlTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgIHRvdWNoUmF0aW86IDAuMixcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gKCBzd2lwZXIgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGlja2VkID0gc3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci5hY3RpdmVJbmRleCA9IGNsaWNrZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2lwZXIudXBkYXRlQ2xhc3NlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCggc3dpcGVyLnNsaWRlcyApLnJlbW92ZUNsYXNzKCAnaXMtc2VsZWN0ZWQnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCBzd2lwZXIuY2xpY2tlZFNsaWRlICkuYWRkQ2xhc3MoICdpcy1zZWxlY3RlZCcgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbGxlcnlUb3Auc2xpZGVUbyggY2xpY2tlZCwgNTAwLCBmYWxzZSApO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uSW5pdDogZnVuY3Rpb24gKCAgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbENvdW50ID0gX2dhbGxlcnlUaHVtYnMuZmluZCggJy5zd2lwZXItc2xpZGUnKS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE51bTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHRvdGFsQ291bnQgPCAxMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbENvdW50ID0gJzAnICsgdG90YWxDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgX2dhbGxlcnlUaHVtYnMuZmluZCggJy5nYWxsZXJ5X190aHVtYnMtdG90YWwtY291bnQnICkudGV4dCggdG90YWxDb3VudCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfZ2FsbGVyeVRodW1icy5maW5kKCAnLnN3aXBlci1zbGlkZScpLmVhY2goIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE51bSA9ICQoIHRoaXMgKS5pbmRleCgpICsgMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJyZW50TnVtIDwgMTAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnROdW0gPSAnMCcgKyBjdXJyZW50TnVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAgaWYgKCBjdXJyZW50TnVtWzBdID09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnROdW0gPSBjdXJyZW50TnVtLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5maW5kKCAnLmdhbGxlcnlfX3RodW1icy1jdXJyZW50LW51bScgKS50ZXh0KCBjdXJyZW50TnVtICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9pbml0U3dpcGVyKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBSZWFkTW9yZSA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cpLFxuICAgICAgICAgICAgX2JvZHkgPSAkKCAnYm9keScpLFxuICAgICAgICAgICAgX2l0ZW1zO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhclxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29iai5vbigge1xuXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9kaXNwbGF5SXRlbXMoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgX2Rpc2FwcGVhckl0ZW1zKCk7XG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9kaXNhcHBlYXJJdGVtcyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9pdGVtcyA9IF9vYmoucGFyZW50KCkubmV4dEFsbCgpO1xuXG4gICAgICAgICAgICAgICAgX2l0ZW1zLmNzcygge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfZGlzcGxheUl0ZW1zID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX2l0ZW1zLmNzcygge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIEF3YXJkc0dhbGxlcnkgPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfYXdhcmRzR2FsbGVyeSA9IF9vYmouZmluZCgnLnN3aXBlci1jb250YWluZXInKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2luaXRTd2lwZXIgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgdmFyIHN3aXBlciA9IG5ldyBTd2lwZXIoIF9hd2FyZHNHYWxsZXJ5LCB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IF9hd2FyZHNHYWxsZXJ5LmZpbmQoICcuc3dpcGVyLXBhZ2luYXRpb24nICksXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25DbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5leHRCdXR0b246IF9hd2FyZHNHYWxsZXJ5LmZpbmQoICcuc3dpcGVyLWJ1dHRvbi1uZXh0JyApLFxuICAgICAgICAgICAgICAgICAgICBwcmV2QnV0dG9uOiBfYXdhcmRzR2FsbGVyeS5maW5kKCAnLnN3aXBlci1idXR0b24tcHJldicgKSxcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAnZmFkZScsXG4gICAgICAgICAgICAgICAgICAgIGZhZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzRmFkZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDMwXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfaW5pdFN3aXBlcigpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgU2l0ZUNvbnRlbnRQb3B1cE5pY2VTY3JvbGwgPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93KTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmoubmljZVNjcm9sbCgge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yY29sb3I6XCIjMjcyODJkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3JvcGFjaXR5bWluOiBcIjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcmJvcmRlcnJhZGl1czogXCIycHhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcmJvcmRlcjogXCJub25lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBcIiMzZDNlNDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcndpZHRoOiBcIjVweFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b2hpZGVtb2RlOiAnbGVhdmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlbW91c2V3aGVlbDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICB9LCAxMCApO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5nZXROaWNlU2Nyb2xsKCkucmVzaXplKCk7XG5cbiAgICAgICAgICAgICAgICB9LCAzNTAgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcblxuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBBYm91dFBvcnRmb2xpb1BvcHVwID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2l0ZW1zID0gX29iai5maW5kKCcuYWJvdXQtcG9ydGZvbGlvX19pdGVtJyksXG4gICAgICAgICAgICBfcG9wdXBHYWxsZXJ5ID0gJCgnLmdhbGxlcnktcG9wdXAnKSxcbiAgICAgICAgICAgIF9wb3B1cEdhbGxlcnlDbG9zZSA9IF9wb3B1cEdhbGxlcnkuZmluZCgnLmdhbGxlcnktcG9wdXBfX2Nsb3NlJyksXG4gICAgICAgICAgICBfcG9wdXBHYWxsZXJ5V3JhcCA9IF9wb3B1cEdhbGxlcnkuZmluZCgnLmdhbGxlcnktcG9wdXBfX3dyYXAnKSxcbiAgICAgICAgICAgIF9wb3B1cEdhbGxlcnlMb2FkID0gX3BvcHVwR2FsbGVyeS5maW5kKCcuZ2FsbGVyeS1wb3B1cF9fcHJlbG9hZGVyJyksXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX2h0bWwgPSAkKCdodG1sJyksXG4gICAgICAgICAgICBfYm9keSA9ICQoJ2JvZHknKSxcbiAgICAgICAgICAgIF9yZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cblxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9pdGVtcy5vbigge1xuICAgICAgICAgICAgICAgICAgICAnY2xpY2snOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKCB0aGlzICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9wb3B1cEdhbGxlcnkuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9odG1sLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ib2R5LmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCggY3VySXRlbSApO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9wb3B1cEdhbGxlcnlDbG9zZS5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZVBvcHVwKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2FkZFNjcm9sbCA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5maW5kKCcuZ2FsbGVyeS1wb3B1cF9fdGV4dCcpLm5pY2VTY3JvbGwoIHtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yY29sb3I6XCIjZmVjMzAzXCIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcm9wYWNpdHltaW46IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICBjdXJzb3Jib3JkZXJyYWRpdXM6IFwiMnB4XCIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcmJvcmRlcjogXCJub25lXCIsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IFwiIzNkM2U0MlwiLFxuICAgICAgICAgICAgICAgICAgICBjdXJzb3J3aWR0aDogXCI1cHhcIixcbiAgICAgICAgICAgICAgICAgICAgYXV0b2hpZGVtb2RlOiAnbGVhdmUnLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVtb3VzZXdoZWVsOiB0cnVlXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLmZpbmQoJy5nYWxsZXJ5LXBvcHVwX190ZXh0JykuZ2V0TmljZVNjcm9sbCgpLnJlc2l6ZSgpXG5cbiAgICAgICAgICAgICAgICB9LCAyMDApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2Nsb3NlUG9wdXAgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9odG1sLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93LXknOiAnYXV0bydcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICAgICBfYm9keS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJ2F1dG8nXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9wb3B1cEdhbGxlcnkuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9wb3B1cEdhbGxlcnlMb2FkLmNzcygge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgX3BvcHVwR2FsbGVyeVdyYXAuaHRtbCgnJyk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50ID0gZnVuY3Rpb24gKCBlbGVtICkge1xuXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJ2JvZHknKS5kYXRhKCdhY3Rpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uIDogJ2dldF9nYWxsZXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtLmF0dHIoJ2RhdGEtaWQnKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAobSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfcG9wdXBHYWxsZXJ5V3JhcC5odG1sKG0uaHRtbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkKG0uaHRtbCkuaGFzQ2xhc3MoJ2dhbGxlcnknKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goICQoICcuZ2FsbGVyeScgKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgR2FsbGVyeSggJCh0aGlzKSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0xMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRTY3JvbGwoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wb3B1cEdhbGxlcnlMb2FkLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChYTUxIdHRwUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBYTUxIdHRwUmVxdWVzdC5zdGF0dXNUZXh0ICE9IFwiYWJvcnRcIiApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVSUk9SISEhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBTZXJ2aWNlc0FyZWFHYWxsZXJ5ID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2F3YXJkc0dhbGxlcnkgPSBfb2JqLmZpbmQoJy5zd2lwZXItY29udGFpbmVyJyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9pbml0U3dpcGVyID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIHZhciBzd2lwZXIgPSBuZXcgU3dpcGVyKCBfb2JqLCB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRCdXR0b246IF9vYmouZmluZCggJy5zd2lwZXItYnV0dG9uLW5leHQnICksXG4gICAgICAgICAgICAgICAgICAgIHByZXZCdXR0b246IF9vYmouZmluZCggJy5zd2lwZXItYnV0dG9uLXByZXYnICksXG4gICAgICAgICAgICAgICAgICAgIC8vZWZmZWN0OiAnZmFkZScsXG4gICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMzBcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9pbml0U3dpcGVyKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBBamF4UmVxdWVzdFBvcHVwID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2l0ZW1zID0gX29iai5maW5kKCcuYWpheC1ibG9ja19fYnRuJyksXG4gICAgICAgICAgICBfbG9hZEJsb2NrID0gJCggJy5hamF4LWJsb2NrLScgKyBfb2JqLmF0dHIoICdkYXRhLWJsb2NrJyApICksXG4gICAgICAgICAgICBfcG9wdXBMb2FkID0gJCgnLnBvcHVwX19wcmVsb2FkZXInKSxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfaHRtbCA9ICQoJ2h0bWwnKSxcbiAgICAgICAgICAgIF9ib2R5ID0gJCgnYm9keScpLFxuICAgICAgICAgICAgX3JlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX2l0ZW1zLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQoIHRoaXMgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICEoIGN1ckl0ZW0uaGFzQ2xhc3MoJ2FqYXgtYmxvY2tfX2J0bl9sb2FkZWQnKSkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlbXMucmVtb3ZlQ2xhc3MoJ2FqYXgtYmxvY2tfX2J0bl9sb2FkZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCdhamF4LWJsb2NrX19idG5fbG9hZGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3BvcHVwTG9hZC5yZW1vdmVDbGFzcyggJ2hpZGUnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9hZEJsb2NrLmh0bWwoJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvYWRCbG9jay5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2FkQmxvY2submV4dEFsbCgpLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVxdWVzdENvbnRlbnQoIGN1ckl0ZW0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hZGRTY3JvbGwgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuICAgICAgICAgICAgICAgIGVsZW0ubmljZVNjcm9sbCgge1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3Jjb2xvcjpcIiMyNzI4MmRcIixcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yb3BhY2l0eW1pbjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcmJvcmRlcnJhZGl1czogXCIycHhcIixcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yYm9yZGVyOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogXCIjM2QzZTQyXCIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcndpZHRoOiBcIjVweFwiLFxuICAgICAgICAgICAgICAgICAgICBhdXRvaGlkZW1vZGU6ICdsZWF2ZScsXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZW1vdXNld2hlZWw6IHRydWVcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgIGVsZW0uZ2V0TmljZVNjcm9sbCgpLnJlc2l6ZSgpXG5cbiAgICAgICAgICAgICAgICB9LCAyMDAgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfcmVxdWVzdENvbnRlbnQgPSBmdW5jdGlvbiAoIGVsZW0gKSB7XG5cbiAgICAgICAgICAgICAgICBfcmVxdWVzdC5hYm9ydCgpO1xuXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QgPSAkLmFqYXgoIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCdib2R5JykuYXR0cignZGF0YS1hY3Rpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnZ2V0X2FyZWFzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGx2bDogZWxlbS5hdHRyKCdkYXRhLWx2bCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW0uYXR0cignZGF0YS1pZCcpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICggbSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvYWRCbG9jay5odG1sKCBtLmh0bWwgKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX2xvYWRCbG9jay5maW5kKCcuYWpheC1ibG9jaycpLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBBamF4UmVxdWVzdFBvcHVwKCBfbG9hZEJsb2NrLmZpbmQoJy5hamF4LWJsb2NrJykgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9sb2FkQmxvY2suZmluZCgnLmFjY29yZGlvbicpLmxlbmd0aCApIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKCBfbG9hZEJsb2NrLmZpbmQoJy5hY2NvcmRpb25fMiBkbCcpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBBY2NvcmRpb24oICQodGhpcykgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0xMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkU2Nyb2xsKCBfbG9hZEJsb2NrLmNoaWxkcmVuKCkgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3BvcHVwTG9hZC5hZGRDbGFzcyggJ2hpZGUnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xuXG5cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKFhNTEh0dHBSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gXCJhYm9ydFwiICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRVJST1IhISFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG59ICkoKTtcblxudmFyIEFjY29yZGlvbiA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgX2FjY29yZGlvbkxpc3QgPSBfb2JqLFxuICAgICAgICBfYWNjb3JkaW9uTGlzdE1pbkhlaWdodCA9IF9hY2NvcmRpb25MaXN0LmNzcygnbWluLWhlaWdodCcpLFxuICAgICAgICBfYWNjb3JkaW9uQ2FwdGlvbiA9IF9vYmouZmluZCgnPmR0JyksXG4gICAgICAgIF9hY2NvcmRpb25Db250ZW50ID0gX29iai5maW5kKCc+ZGQnKSxcbiAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyksXG4gICAgICAgIF9oZWlnaHRMaXN0ID0gX2FjY29yZGlvbkNhcHRpb24uaW5uZXJIZWlnaHQoKSArIF9hY2NvcmRpb25DYXB0aW9uLnBvc2l0aW9uKCkudG9wIDtcblxuICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgdmFyIF9vbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfaGVpZ2h0TGlzdCA9IF9hY2NvcmRpb25DYXB0aW9uLmlubmVySGVpZ2h0KCkgKyBfYWNjb3JkaW9uQ2FwdGlvbi5wb3NpdGlvbigpLnRvcCA7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfaGVpZ2h0TGlzdCA9IF9hY2NvcmRpb25DYXB0aW9uLmlubmVySGVpZ2h0KCkgKyBfYWNjb3JkaW9uQ2FwdGlvbi5wb3NpdGlvbigpLnRvcCA7XG4gICAgICAgICAgICAgICAgICAgIF9hY2NvcmRpb25MaXN0LmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiBfaGVpZ2h0TGlzdCArIF9hY2NvcmRpb25Db250ZW50LmZpbHRlcignLnZpc2libGUnKS5pbm5lckhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIF9hY2NvcmRpb25DYXB0aW9uLm9uKCB7XG5cbiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRFbGVtID0gY3VySXRlbS5uZXh0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoICEoIGN1ckl0ZW0uaGFzQ2xhc3MoJ2FjdGl2ZScpICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hY2NvcmRpb25DYXB0aW9uLnJlbW92ZUNsYXNzKCAnYWN0aXZlJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2FjY29yZGlvbkNvbnRlbnQuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWNjb3JkaW9uQ29udGVudC5yZW1vdmVDbGFzcyggJ3Zpc2libGUnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDAgKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCAnYWN0aXZlJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEVsZW0uY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEVsZW0uYWRkQ2xhc3MoICd2aXNpYmxlJyApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vYmoucGFyZW50KCkuaGFzQ2xhc3MoJ2FjY29yZGlvbl8yJykgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRQb3NJdGVtcyggbmV4dEVsZW0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWNjb3JkaW9uTGlzdC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IF9oZWlnaHRMaXN0ICsgbmV4dEVsZW0uaW5uZXJIZWlnaHQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0ucmVtb3ZlQ2xhc3MoICdhY3RpdmUnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRFbGVtLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0RWxlbS5yZW1vdmVDbGFzcyggJ3Zpc2libGUnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2FjY29yZGlvbkxpc3QuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiBwYXJzZUludChfYWNjb3JkaW9uTGlzdE1pbkhlaWdodCkgLyAxNiArICdlbSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSApO1xuXG4gICAgICAgIH0sXG4gICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgX29uRXZlbnRzKCk7XG5cbiAgICAgICAgfSxcbiAgICAgICAgX3NldFBvc0l0ZW1zID0gZnVuY3Rpb24gKCBlbGVtICkge1xuXG4gICAgICAgICAgICBlbGVtLmNzcygge1xuICAgICAgICAgICAgICAgICd0b3AnOiBfaGVpZ2h0TGlzdFxuICAgICAgICAgICAgfSApO1xuXG4gICAgICAgIH07XG5cblxuICAgIF9pbml0KCk7XG59O1xuXG4iLCIoIGZ1bmN0aW9uKCl7XG5cbiAgICAkKCBmdW5jdGlvbigpe1xuICAgICAgICAkKCAnc2VsZWN0JyApLmVhY2goIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBuZXcgV2Vic3RlcnNTZWxlY3QoIHtcbiAgICAgICAgICAgICAgICBvYmo6ICQoIHRoaXMgKSxcbiAgICAgICAgICAgICAgICBvcHRpb25UeXBlOiAxLFxuICAgICAgICAgICAgICAgIHNob3dUeXBlOiAyXG4gICAgICAgICAgICB9ICk7XG4gICAgICAgIH0gKTtcbiAgICB9ICk7XG5cbiAgICB2YXIgV2Vic3RlcnNTZWxlY3QgPSBmdW5jdGlvbiggcGFyYW1zICl7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBwYXJhbXMub2JqLFxuICAgICAgICAgICAgX29wdGlvblR5cGUgPSBwYXJhbXMub3B0aW9uVHlwZSB8fCAwLFxuICAgICAgICAgICAgX3Nob3dUeXBlID0gcGFyYW1zLnNob3dUeXBlIHx8IDAsXG4gICAgICAgICAgICBfdmlzaWJsZSA9IHBhcmFtcy52aXNpYmxlIHx8IDUsXG4gICAgICAgICAgICBfZGV2aWNlID0gL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICksXG4gICAgICAgICAgICBfdGV4dCA9ICQoICc8c3BhbiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdF9faXRlbVwiPjwvc3Bhbj4nICksXG4gICAgICAgICAgICBfd3JhcCA9ICQoICc8ZGl2IGNsYXNzPVwid2Vic3RlcnMtc2VsZWN0XCI+PC9kaXY+JyApLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApLFxuICAgICAgICAgICAgX2JvZHkgPSAkKCAnYm9keScgKSxcbiAgICAgICAgICAgIF9vcGVuZWQgPSBmYWxzZSxcbiAgICAgICAgICAgIF9wb3B1cCwgX3Njcm9sbDtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZFdyYXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciBjdXJUZXh0ID0gJyc7XG5cbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgX29iai53cmFwKCBfd3JhcCApO1xuICAgICAgICAgICAgICAgIF93cmFwID0gX29iai5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICBfd3JhcC5hcHBlbmQoICc8ZGl2IGNsYXNzPVwid2Vic3RlcnMtc2VsZWN0X19hcnJvd1wiPjwvZGl2PicgKTtcbiAgICAgICAgICAgICAgICBfb2JqLmJlZm9yZSggX3RleHQgKTtcbiAgICAgICAgICAgICAgICBfb2JqLmZpbmQoICdvcHRpb24nICkuZWFjaCggZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKCB0aGlzICk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIGN1ckl0ZW0uYXR0ciggJ3NlbGVjdGVkJyApID09ICdzZWxlY3RlZCcgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clRleHQgPSBjdXJJdGVtLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIGlmKCBjdXJUZXh0ID09ICcnICl7XG4gICAgICAgICAgICAgICAgICAgIGN1clRleHQgPSAgX29iai5maW5kKCAnb3B0aW9uJykuZXEoIDAgKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90ZXh0LnRleHQoIGN1clRleHQgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaGlkZVBvcHVwID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfb3BlbmVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiggIV9zaG93VHlwZSApe1xuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX3Nob3dUeXBlID09IDEgKXtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnN0b3AoIHRydWUsIGZhbHNlICkuc2xpZGVVcCggMzAwLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfc2hvd1R5cGUgPT0gMiApIHtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnN0b3AoIHRydWUsIGZhbHNlICkuZmFkZU91dCggMzAwLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX3dyYXAucmVtb3ZlQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3Rfb3BlbmVkJyApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XG5cbiAgICAgICAgICAgICAgICBfYWRkV3JhcCgpO1xuICAgICAgICAgICAgICAgIF9zZWxlY3RWaWV3VHlwZSgpO1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX29iai5vbiggJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGV4dC50ZXh0KCAkKCB0aGlzICkuZmluZCggJ29wdGlvbjpzZWxlY3RlZCcgKS50ZXh0KCkgKTtcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBpZiggX29wdGlvblR5cGUgPT0gMSAmJiAhX2RldmljZSApe1xuICAgICAgICAgICAgICAgICAgICBfd3JhcC5vbigge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oIGUgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93UG9wdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICQoJy5uaWNlLXNjcm9sbCcpLm9uKCB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2VsZWN0Vmlld1R5cGUgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgaWYoICFfb3B0aW9uVHlwZSB8fCBfZGV2aWNlICl7XG4gICAgICAgICAgICAgICAgICAgIF9zZXRNb2JpbGVWaWV3KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfb3B0aW9uVHlwZSA9PSAxICl7XG4gICAgICAgICAgICAgICAgICAgIF9zZXRDdXN0b20xKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zZXRDdXN0b20xID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfd3JhcC5hZGRDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9jdXN0b20nICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldE1vYmlsZVZpZXcgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF93cmFwLmFkZENsYXNzKCAnd2Vic3RlcnMtc2VsZWN0X21vYmlsZScgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2hvd1BvcHVwID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0cyA9ICQoICdzZWxlY3QnICksXG4gICAgICAgICAgICAgICAgICAgIGxpc3QgPSAkKCAnPHVsPjwvdWw+JyksXG4gICAgICAgICAgICAgICAgICAgIGN1clNjcm9sbCA9IF93aW5kb3cuc2Nyb2xsVG9wKCksXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IF93cmFwLm9mZnNldCgpLFxuICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQgPSAwLFxuICAgICAgICAgICAgICAgICAgICBjdXJJbmRleCA9IF9vYmouZmluZCggJ29wdGlvbjpzZWxlY3RlZCcgKS5pbmRleCgpLFxuICAgICAgICAgICAgICAgICAgICBpZCA9IE1hdGgucm91bmQoIE1hdGgucmFuZG9tKCkgKiAxMDAwICk7XG5cbiAgICAgICAgICAgICAgICBzZWxlY3RzLmVhY2goIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKCB0aGlzICE9PSBfb2JqWyAwIF0gJiYgdGhpcy5vYmouY2hlY2tPcGVuZWQoKSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmouY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIGlmKCBfb3BlbmVkICl7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX29wZW5lZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBfcG9wdXAgPSAkKCAnPGRpdiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdF9fcG9wdXBcIiBpZD1cIndlYnN0ZXJzLXNlbGVjdF9fcG9wdXAnICsgaWQgKyAnXCI+PC9kaXY+JyApO1xuXG4gICAgICAgICAgICAgICAgX29iai5maW5kKCAnb3B0aW9uJyApLmVhY2goIGZ1bmN0aW9uKCBpICl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCggdGhpcyApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBpID09IGN1ckluZGV4ICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmFwcGVuZCggJzxsaSBjbGFzcz1cImFjdGl2ZVwiPicgKyBjdXJJdGVtLnRleHQoKSArICc8L2xpPicgKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kKCAnPGxpPicgKyBjdXJJdGVtLnRleHQoKSArICc8L2xpPicgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgX3BvcHVwLmFwcGVuZCggbGlzdCApO1xuICAgICAgICAgICAgICAgIF9ib2R5LmFwcGVuZCggX3BvcHVwICk7XG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3Rfb3BlbmVkJyApO1xuXG4gICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogX3dyYXAub3V0ZXJXaWR0aCgpLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBvZmZzZXQubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBvZmZzZXQudG9wICsgX3dyYXAub3V0ZXJIZWlnaHQoKVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IF9wb3B1cC5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgICAgIGlmKCBtYXhIZWlnaHQgPiBfcG9wdXAuZmluZCggJ2xpJyApLmVxKCAwICkub3V0ZXJIZWlnaHQoKSAqIF92aXNpYmxlICl7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5oZWlnaHQoIF9wb3B1cC5maW5kKCAnbGknICkuZXEoIDAgKS5vdXRlckhlaWdodCgpICogX3Zpc2libGUgKTtcbiAgICAgICAgICAgICAgICAgICAgX3Njcm9sbCA9IF9wb3B1cC5uaWNlU2Nyb2xsKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3JpenJhaWxlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoIF9zaG93VHlwZSA9PSAxICl7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5zbGlkZURvd24oIDMwMCApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX3Nob3dUeXBlID09IDIgKSB7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuMVxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5hbmltYXRlKCB7IG9wYWNpdHk6IDEgfSwgMzAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfcG9wdXAuZmluZCggJ2xpJyApLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uKCBlICl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkKCB0aGlzICkuaW5kZXgoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai52YWwoIF9vYmouZmluZCggJ29wdGlvbicgKS5lcSggaW5kZXggKS5hdHRyKCAndmFsdWUnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoudHJpZ2dlciggJ2NoYW5nZScgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuICAgICAgICBfc2VsZi5jaGVja09wZW5lZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gX29wZW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgX3NlbGYuY2xvc2UgPSBmdW5jdGlvbigpe1xuICAgICAgICAgIF9oaWRlUG9wdXAoKTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIF9jb25zdHJ1Y3RvcigpO1xuXG4gICAgfTtcblxufSApKCk7IiwiKCBmdW5jdGlvbigpe1xuXG4gICAgJCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgJCggJy5wb3B1cCcgKS5lYWNoKCBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICBuZXcgUG9wdXAoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cblxuXG59ICkoKTtcblxudmFyIFBvcHVwID0gZnVuY3Rpb24oIG9iaiApe1xuXG4gICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICBfcG9wdXBQYWRkaW5nID0gNDAsXG4gICAgICAgIF9idG5TaG93ID0gICQoICcucG9wdXBfX29wZW4nICksXG4gICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgIF9idG5DbG9zZSA9IF9vYmouZmluZCggJy5wb3B1cF9fY2xvc2UsIC5wb3B1cF9fY2FuY2VsJyApLFxuICAgICAgICBfd3JhcCA9IF9vYmouZmluZCggJy5wb3B1cF9fd3JhcCcgKSxcbiAgICAgICAgX2NvbnRlbnRzID0gX29iai5maW5kKCAnLnBvcHVwX19jb250ZW50JyApLFxuICAgICAgICBfZG9tID0gJCggJ2h0bWwsIGJvZHknICksXG4gICAgICAgIF9jb250ZW50ID0gJCggJy5zaXRlX19jb250ZW50JyApLFxuICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgIF90aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7fSwgMSApO1xuXG4gICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICB2YXIgX2NlbnRlcldyYXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYgKCBfd2luZG93LmhlaWdodCgpIC0gKCBfcG9wdXBQYWRkaW5nICogMiApIC0gX3dyYXAuaGVpZ2h0KCkgPiAwICkge1xuICAgICAgICAgICAgICAgIF93cmFwLmNzcyggeyB0b3A6ICggKCBfd2luZG93LmhlaWdodCgpIC0gKCBfcG9wdXBQYWRkaW5nICogMiApICkgLSBfd3JhcC5oZWlnaHQoKSApIC8gMiB9ICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF93cmFwLmNzcyggeyB0b3A6IDAgfSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfY2hhbmdlQ29udGVudFppbmRleCA9IGZ1bmN0aW9uICgpe1xuICAgICAgICAgICAgX2NvbnRlbnQuY3NzKCB7XG4gICAgICAgICAgICAgICAgJ3otaW5kZXgnOiA0XG4gICAgICAgICAgICB9ICk7XG4gICAgICAgIH0sXG4gICAgICAgIF9yZXNldENvbnRlbnRaaW5kZXggPSBmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgIF9jb250ZW50LmNzcygge1xuICAgICAgICAgICAgICAgICd6LWluZGV4JzogMlxuICAgICAgICAgICAgfSApO1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0U2Nyb2xsV2lkdGggPSBmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyksXG4gICAgICAgICAgICAgICAgc2Nyb2xsQmFyV2lkdGg7XG5cbiAgICAgICAgICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSAncG9wdXBfX3Njcm9sbGJhci1tZWFzdXJlJztcblxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggc2Nyb2xsRGl2ICk7XG5cbiAgICAgICAgICAgIHNjcm9sbEJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG5cbiAgICAgICAgICAgIHJldHVybiBzY3JvbGxCYXJXaWR0aDtcbiAgICAgICAgfSxcbiAgICAgICAgX2hpZGUgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgX29iai5jc3MoIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nXG4gICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdwb3B1cF9vcGVuZWQnICk7XG4gICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAncG9wdXBfaGlkZScgKTtcblxuICAgICAgICAgICAgX3RpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIF9vYmouY3NzICh7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAncG9wdXBfaGlkZScgKTtcblxuICAgICAgICAgICAgfSwgMzAwICk7XG5cbiAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgX2RvbS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9yZXNldENvbnRlbnRaaW5kZXgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2NvbnRlbnRzLmNzcyggeyBkaXNwbGF5OiAnbm9uZScgfSApO1xuXG4gICAgICAgICAgICBpZiggX29iai5maW5kKCcucG9wdXBfX2FkZHJlc3NlcycpLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLnBvcHVwX19hZGRyZXNzZXMnKS5jaGlsZHJlbigpLmNzcyggeyBkaXNwbGF5OiAnbm9uZScgfSApO1xuICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLnBvcHVwX19hZGRyZXNzZXMnKS5jaGlsZHJlbigpLmh0bWwoJycpO1xuICAgICAgICAgICAgICAgIF9idG5TaG93LnJlbW92ZUNsYXNzKCdhamF4LWJsb2NrX19idG5fbG9hZGVkJyk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICBfb25FdmVudHMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8IDEwMjQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9fY2VudGVyV3JhcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgX2J0blNob3cub24oIHtcbiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgX3Nob3coICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1wb3B1cCcgKSApO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIF93cmFwLm9uKCB7XG4gICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCBlICl7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgX29iai5vbigge1xuICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBfaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgX2J0bkNsb3NlLm9uKCB7XG4gICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIF9oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zaG93ID0gZnVuY3Rpb24oIGNsYXNzTmFtZSApe1xuICAgICAgICAgICAgX3NldFBvcHVwQ29udGVudCggY2xhc3NOYW1lICk7XG5cbiAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdwb3B1cF9vcGVuZWQnICk7XG5cbiAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgX2RvbS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJ1xuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9jaGFuZ2VDb250ZW50WmluZGV4KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcbiAgICAgICAgX3NldFBvcHVwQ29udGVudCA9IGZ1bmN0aW9uKCBjbGFzc05hbWUgKXtcbiAgICAgICAgICAgIHZhciBjdXJDb250ZW50ID0gX2NvbnRlbnRzLmZpbHRlciggJy5wb3B1cF9fJyArIGNsYXNzTmFtZSApO1xuXG4gICAgICAgICAgICAvL19jb250ZW50cy5jc3MoIHsgZGlzcGxheTogJ25vbmUnIH0gKTtcbiAgICAgICAgICAgIGN1ckNvbnRlbnQuY3NzKCB7IGRpc3BsYXk6ICdibG9jaycgfSApO1xuXG4gICAgICAgIH07XG5cbiAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAvL3B1YmxpYyBtZXRob2RzXG5cbiAgICBfaW5pdCgpO1xufTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
